--!strict
-- DO NOT EDIT MANUALLY!! This file was generated by nightcycle/pseudo-enum, edits will likely be overwritten!
export type SchemeType = "Light" | "Dark"
local SchemeTypeList = table.freeze({ "Light", "Dark" })
local SchemeTypeDict = table.freeze({
	Light = "Light" :: "Light",
	Dark = "Dark" :: "Dark",
})
local SchemeTypeValueDict = table.freeze({
	Light = 1,
	Dark = 2,
})
local SchemeTypeInverseValueDict = table.freeze({
	[1] = "Light",
	[2] = "Dark",
})
export type TransitionDuration =
	"Short1"
	| "Short2"
	| "Short3"
	| "Short4"
	| "Medium1"
	| "Medium2"
	| "Medium3"
	| "Medium4"
	| "Long1"
	| "Long2"
	| "Long3"
	| "Long4"
	| "ExtraLong1"
	| "ExtraLong2"
	| "ExtraLong3"
	| "ExtraLong4"
local TransitionDurationList =
	table.freeze({ "Short1", "Short2", "Short3", "Short4", "Medium1", "Medium2", "Medium3", "Medium4", "Long1", "Long2", "Long3", "Long4", "ExtraLong1", "ExtraLong2", "ExtraLong3", "ExtraLong4" })
local TransitionDurationDict = table.freeze({
	Short1 = "Short1" :: "Short1",
	Short2 = "Short2" :: "Short2",
	Short3 = "Short3" :: "Short3",
	Short4 = "Short4" :: "Short4",
	Medium1 = "Medium1" :: "Medium1",
	Medium2 = "Medium2" :: "Medium2",
	Medium3 = "Medium3" :: "Medium3",
	Medium4 = "Medium4" :: "Medium4",
	Long1 = "Long1" :: "Long1",
	Long2 = "Long2" :: "Long2",
	Long3 = "Long3" :: "Long3",
	Long4 = "Long4" :: "Long4",
	ExtraLong1 = "ExtraLong1" :: "ExtraLong1",
	ExtraLong2 = "ExtraLong2" :: "ExtraLong2",
	ExtraLong3 = "ExtraLong3" :: "ExtraLong3",
	ExtraLong4 = "ExtraLong4" :: "ExtraLong4",
})
local TransitionDurationValueDict = table.freeze({
	Short1 = 1,
	Short2 = 2,
	Short3 = 3,
	Short4 = 4,
	Medium1 = 5,
	Medium2 = 6,
	Medium3 = 7,
	Medium4 = 8,
	Long1 = 9,
	Long2 = 10,
	Long3 = 11,
	Long4 = 12,
	ExtraLong1 = 13,
	ExtraLong2 = 14,
	ExtraLong3 = 15,
	ExtraLong4 = 16,
})
local TransitionDurationInverseValueDict = table.freeze({
	[1] = "Short1",
	[2] = "Short2",
	[3] = "Short3",
	[4] = "Short4",
	[5] = "Medium1",
	[6] = "Medium2",
	[7] = "Medium3",
	[8] = "Medium4",
	[9] = "Long1",
	[10] = "Long2",
	[11] = "Long3",
	[12] = "Long4",
	[13] = "ExtraLong1",
	[14] = "ExtraLong2",
	[15] = "ExtraLong3",
	[16] = "ExtraLong4",
})
export type TransitionType = "Emphasized" | "EmphasizedDecelerate" | "EmphasizedAccelerate" | "Standard" | "StandardDecelerate" | "StandardAccelerate"
local TransitionTypeList = table.freeze({ "Emphasized", "EmphasizedDecelerate", "EmphasizedAccelerate", "Standard", "StandardDecelerate", "StandardAccelerate" })
local TransitionTypeDict = table.freeze({
	Emphasized = "Emphasized" :: "Emphasized",
	EmphasizedDecelerate = "EmphasizedDecelerate" :: "EmphasizedDecelerate",
	EmphasizedAccelerate = "EmphasizedAccelerate" :: "EmphasizedAccelerate",
	Standard = "Standard" :: "Standard",
	StandardDecelerate = "StandardDecelerate" :: "StandardDecelerate",
	StandardAccelerate = "StandardAccelerate" :: "StandardAccelerate",
})
local TransitionTypeValueDict = table.freeze({
	Emphasized = 1,
	EmphasizedDecelerate = 2,
	EmphasizedAccelerate = 3,
	Standard = 4,
	StandardDecelerate = 5,
	StandardAccelerate = 6,
})
local TransitionTypeInverseValueDict = table.freeze({
	[1] = "Emphasized",
	[2] = "EmphasizedDecelerate",
	[3] = "EmphasizedAccelerate",
	[4] = "Standard",
	[5] = "StandardDecelerate",
	[6] = "StandardAccelerate",
})
export type SelectionState = "Selected" | "Unselected"
local SelectionStateList = table.freeze({ "Selected", "Unselected" })
local SelectionStateDict = table.freeze({
	Selected = "Selected" :: "Selected",
	Unselected = "Unselected" :: "Unselected",
})
local SelectionStateValueDict = table.freeze({
	Selected = 1,
	Unselected = 2,
})
local SelectionStateInverseValueDict = table.freeze({
	[1] = "Selected",
	[2] = "Unselected",
})
export type ColorRoleType =
	"Primary"
	| "OnPrimary"
	| "PrimaryContainer"
	| "OnPrimaryContainer"
	| "Secondary"
	| "OnSecondary"
	| "SecondaryContainer"
	| "OnSecondaryContainer"
	| "Tertiary"
	| "OnTertiary"
	| "TertiaryContainer"
	| "OnTertiaryContainer"
	| "Error"
	| "OnError"
	| "ErrorContainer"
	| "OnErrorContainer"
	| "Background"
	| "OnBackground"
	| "Surface"
	| "OnSurface"
	| "SurfaceVariant"
	| "OnSurfaceVariant"
	| "Outline"
	| "OutlineVariant"
	| "Shadow"
	| "Scrim"
	| "InverseSurface"
	| "InverseOnSurface"
	| "InversePrimary"
	| "SurfaceDim"
	| "SurfaceBright"
	| "SurfaceContainerLowest"
	| "SurfaceContainerLow"
	| "SurfaceContainer"
	| "SurfaceContainerHigh"
	| "SurfaceContainerHighest"
	| "SurfaceTint"
local ColorRoleTypeList = table.freeze({
	"Primary",
	"OnPrimary",
	"PrimaryContainer",
	"OnPrimaryContainer",
	"Secondary",
	"OnSecondary",
	"SecondaryContainer",
	"OnSecondaryContainer",
	"Tertiary",
	"OnTertiary",
	"TertiaryContainer",
	"OnTertiaryContainer",
	"Error",
	"OnError",
	"ErrorContainer",
	"OnErrorContainer",
	"Background",
	"OnBackground",
	"Surface",
	"OnSurface",
	"SurfaceVariant",
	"OnSurfaceVariant",
	"Outline",
	"OutlineVariant",
	"Shadow",
	"Scrim",
	"InverseSurface",
	"InverseOnSurface",
	"InversePrimary",
	"SurfaceDim",
	"SurfaceBright",
	"SurfaceContainerLowest",
	"SurfaceContainerLow",
	"SurfaceContainer",
	"SurfaceContainerHigh",
	"SurfaceContainerHighest",
	"SurfaceTint",
})
local ColorRoleTypeDict = table.freeze({
	Primary = "Primary" :: "Primary",
	OnPrimary = "OnPrimary" :: "OnPrimary",
	PrimaryContainer = "PrimaryContainer" :: "PrimaryContainer",
	OnPrimaryContainer = "OnPrimaryContainer" :: "OnPrimaryContainer",
	Secondary = "Secondary" :: "Secondary",
	OnSecondary = "OnSecondary" :: "OnSecondary",
	SecondaryContainer = "SecondaryContainer" :: "SecondaryContainer",
	OnSecondaryContainer = "OnSecondaryContainer" :: "OnSecondaryContainer",
	Tertiary = "Tertiary" :: "Tertiary",
	OnTertiary = "OnTertiary" :: "OnTertiary",
	TertiaryContainer = "TertiaryContainer" :: "TertiaryContainer",
	OnTertiaryContainer = "OnTertiaryContainer" :: "OnTertiaryContainer",
	Error = "Error" :: "Error",
	OnError = "OnError" :: "OnError",
	ErrorContainer = "ErrorContainer" :: "ErrorContainer",
	OnErrorContainer = "OnErrorContainer" :: "OnErrorContainer",
	Background = "Background" :: "Background",
	OnBackground = "OnBackground" :: "OnBackground",
	Surface = "Surface" :: "Surface",
	OnSurface = "OnSurface" :: "OnSurface",
	SurfaceVariant = "SurfaceVariant" :: "SurfaceVariant",
	OnSurfaceVariant = "OnSurfaceVariant" :: "OnSurfaceVariant",
	Outline = "Outline" :: "Outline",
	OutlineVariant = "OutlineVariant" :: "OutlineVariant",
	Shadow = "Shadow" :: "Shadow",
	Scrim = "Scrim" :: "Scrim",
	InverseSurface = "InverseSurface" :: "InverseSurface",
	InverseOnSurface = "InverseOnSurface" :: "InverseOnSurface",
	InversePrimary = "InversePrimary" :: "InversePrimary",
	SurfaceDim = "SurfaceDim" :: "SurfaceDim",
	SurfaceBright = "SurfaceBright" :: "SurfaceBright",
	SurfaceContainerLowest = "SurfaceContainerLowest" :: "SurfaceContainerLowest",
	SurfaceContainerLow = "SurfaceContainerLow" :: "SurfaceContainerLow",
	SurfaceContainer = "SurfaceContainer" :: "SurfaceContainer",
	SurfaceContainerHigh = "SurfaceContainerHigh" :: "SurfaceContainerHigh",
	SurfaceContainerHighest = "SurfaceContainerHighest" :: "SurfaceContainerHighest",
	SurfaceTint = "SurfaceTint" :: "SurfaceTint",
})
local ColorRoleTypeValueDict = table.freeze({
	Primary = 1,
	OnPrimary = 2,
	PrimaryContainer = 3,
	OnPrimaryContainer = 4,
	Secondary = 5,
	OnSecondary = 6,
	SecondaryContainer = 7,
	OnSecondaryContainer = 8,
	Tertiary = 9,
	OnTertiary = 10,
	TertiaryContainer = 11,
	OnTertiaryContainer = 12,
	Error = 13,
	OnError = 14,
	ErrorContainer = 15,
	OnErrorContainer = 16,
	Background = 17,
	OnBackground = 18,
	Surface = 19,
	OnSurface = 20,
	SurfaceVariant = 21,
	OnSurfaceVariant = 22,
	Outline = 23,
	OutlineVariant = 24,
	Shadow = 25,
	Scrim = 26,
	InverseSurface = 27,
	InverseOnSurface = 28,
	InversePrimary = 29,
	SurfaceDim = 30,
	SurfaceBright = 31,
	SurfaceContainerLowest = 32,
	SurfaceContainerLow = 33,
	SurfaceContainer = 34,
	SurfaceContainerHigh = 35,
	SurfaceContainerHighest = 36,
	SurfaceTint = 37,
})
local ColorRoleTypeInverseValueDict = table.freeze({
	[1] = "Primary",
	[2] = "OnPrimary",
	[3] = "PrimaryContainer",
	[4] = "OnPrimaryContainer",
	[5] = "Secondary",
	[6] = "OnSecondary",
	[7] = "SecondaryContainer",
	[8] = "OnSecondaryContainer",
	[9] = "Tertiary",
	[10] = "OnTertiary",
	[11] = "TertiaryContainer",
	[12] = "OnTertiaryContainer",
	[13] = "Error",
	[14] = "OnError",
	[15] = "ErrorContainer",
	[16] = "OnErrorContainer",
	[17] = "Background",
	[18] = "OnBackground",
	[19] = "Surface",
	[20] = "OnSurface",
	[21] = "SurfaceVariant",
	[22] = "OnSurfaceVariant",
	[23] = "Outline",
	[24] = "OutlineVariant",
	[25] = "Shadow",
	[26] = "Scrim",
	[27] = "InverseSurface",
	[28] = "InverseOnSurface",
	[29] = "InversePrimary",
	[30] = "SurfaceDim",
	[31] = "SurfaceBright",
	[32] = "SurfaceContainerLowest",
	[33] = "SurfaceContainerLow",
	[34] = "SurfaceContainer",
	[35] = "SurfaceContainerHigh",
	[36] = "SurfaceContainerHighest",
	[37] = "SurfaceTint",
})
export type ButtonStateType = "Enabled" | "Disabled" | "Hovered" | "Focused" | "Pressed"
local ButtonStateTypeList = table.freeze({ "Enabled", "Disabled", "Hovered", "Focused", "Pressed" })
local ButtonStateTypeDict = table.freeze({
	Enabled = "Enabled" :: "Enabled",
	Disabled = "Disabled" :: "Disabled",
	Hovered = "Hovered" :: "Hovered",
	Focused = "Focused" :: "Focused",
	Pressed = "Pressed" :: "Pressed",
})
local ButtonStateTypeValueDict = table.freeze({
	Enabled = 1,
	Disabled = 2,
	Hovered = 3,
	Focused = 4,
	Pressed = 5,
})
local ButtonStateTypeInverseValueDict = table.freeze({
	[1] = "Enabled",
	[2] = "Disabled",
	[3] = "Hovered",
	[4] = "Focused",
	[5] = "Pressed",
})
export type CustomColorType = "Custom" | "OnCustom" | "CustomContainer" | "OnCustomContainer"
local CustomColorTypeList = table.freeze({ "Custom", "OnCustom", "CustomContainer", "OnCustomContainer" })
local CustomColorTypeDict = table.freeze({
	Custom = "Custom" :: "Custom",
	OnCustom = "OnCustom" :: "OnCustom",
	CustomContainer = "CustomContainer" :: "CustomContainer",
	OnCustomContainer = "OnCustomContainer" :: "OnCustomContainer",
})
local CustomColorTypeValueDict = table.freeze({
	Custom = 1,
	OnCustom = 2,
	CustomContainer = 3,
	OnCustomContainer = 4,
})
local CustomColorTypeInverseValueDict = table.freeze({
	[1] = "Custom",
	[2] = "OnCustom",
	[3] = "CustomContainer",
	[4] = "OnCustomContainer",
})
export type FontType =
	"DisplayLarge"
	| "DisplayMedium"
	| "DisplaySmall"
	| "HeadlineLarge"
	| "HeadlineMedium"
	| "HeadlineSmall"
	| "TitleLarge"
	| "TitleMedium"
	| "TitleSmall"
	| "BodyLarge"
	| "BodyMedium"
	| "BodySmall"
	| "LabelLarge"
	| "LabelMedium"
	| "LabelSmall"
local FontTypeList = table.freeze({
	"DisplayLarge",
	"DisplayMedium",
	"DisplaySmall",
	"HeadlineLarge",
	"HeadlineMedium",
	"HeadlineSmall",
	"TitleLarge",
	"TitleMedium",
	"TitleSmall",
	"BodyLarge",
	"BodyMedium",
	"BodySmall",
	"LabelLarge",
	"LabelMedium",
	"LabelSmall",
})
local FontTypeDict = table.freeze({
	DisplayLarge = "DisplayLarge" :: "DisplayLarge",
	DisplayMedium = "DisplayMedium" :: "DisplayMedium",
	DisplaySmall = "DisplaySmall" :: "DisplaySmall",
	HeadlineLarge = "HeadlineLarge" :: "HeadlineLarge",
	HeadlineMedium = "HeadlineMedium" :: "HeadlineMedium",
	HeadlineSmall = "HeadlineSmall" :: "HeadlineSmall",
	TitleLarge = "TitleLarge" :: "TitleLarge",
	TitleMedium = "TitleMedium" :: "TitleMedium",
	TitleSmall = "TitleSmall" :: "TitleSmall",
	BodyLarge = "BodyLarge" :: "BodyLarge",
	BodyMedium = "BodyMedium" :: "BodyMedium",
	BodySmall = "BodySmall" :: "BodySmall",
	LabelLarge = "LabelLarge" :: "LabelLarge",
	LabelMedium = "LabelMedium" :: "LabelMedium",
	LabelSmall = "LabelSmall" :: "LabelSmall",
})
local FontTypeValueDict = table.freeze({
	DisplayLarge = 1,
	DisplayMedium = 2,
	DisplaySmall = 3,
	HeadlineLarge = 4,
	HeadlineMedium = 5,
	HeadlineSmall = 6,
	TitleLarge = 7,
	TitleMedium = 8,
	TitleSmall = 9,
	BodyLarge = 10,
	BodyMedium = 11,
	BodySmall = 12,
	LabelLarge = 13,
	LabelMedium = 14,
	LabelSmall = 15,
})
local FontTypeInverseValueDict = table.freeze({
	[1] = "DisplayLarge",
	[2] = "DisplayMedium",
	[3] = "DisplaySmall",
	[4] = "HeadlineLarge",
	[5] = "HeadlineMedium",
	[6] = "HeadlineSmall",
	[7] = "TitleLarge",
	[8] = "TitleMedium",
	[9] = "TitleSmall",
	[10] = "BodyLarge",
	[11] = "BodyMedium",
	[12] = "BodySmall",
	[13] = "LabelLarge",
	[14] = "LabelMedium",
	[15] = "LabelSmall",
})
export type SoundType =
	"hero_simple_celebration_02"
	| "navigation_cancel"
	| "ui_tap_variant_03"
	| "alert_error_03"
	| "notification_ambient"
	| "state_change_confirm_up"
	| "ringtone_minimal"
	| "hero_decorative_celebration_01"
	| "navigation_transition_right"
	| "hero_decorative_celebration_02"
	| "alert_simple"
	| "ui_loading"
	| "notification_decorative_01"
	| "notification_high_intensity"
	| "navigation_backward_selection_minimal"
	| "navigation_unavailable_selection"
	| "ui_unlock"
	| "notification_decorative_02"
	| "navigation_hover_tap"
	| "ui_tap_variant_01"
	| "ui_tap_variant_04"
	| "ui_tap_variant_02"
	| "alert_error_02"
	| "alarm_gentle"
	| "ui_refresh_feed"
	| "hero_simple_celebration_01"
	| "hero_decorative_celebration_03"
	| "hero_simple_celebration_03"
	| "alert_high_intensity"
	| "state_change_confirm_down"
	| "navigation_transition_left"
	| "notification_simple_01"
	| "navigation_forward_selection"
	| "navigation_selection_complete_celebration"
	| "ui_camera_shutter"
	| "navigation_forward_selection_minimal"
	| "notification_simple_02"
	| "navigation_backward_selection"
	| "ui_lock"
	| "alert_error_01"
local SoundTypeList = table.freeze({
	"hero_simple_celebration_02",
	"navigation_cancel",
	"ui_tap_variant_03",
	"alert_error_03",
	"notification_ambient",
	"state_change_confirm_up",
	"ringtone_minimal",
	"hero_decorative_celebration_01",
	"navigation_transition_right",
	"hero_decorative_celebration_02",
	"alert_simple",
	"ui_loading",
	"notification_decorative_01",
	"notification_high_intensity",
	"navigation_backward_selection_minimal",
	"navigation_unavailable_selection",
	"ui_unlock",
	"notification_decorative_02",
	"navigation_hover_tap",
	"ui_tap_variant_01",
	"ui_tap_variant_04",
	"ui_tap_variant_02",
	"alert_error_02",
	"alarm_gentle",
	"ui_refresh_feed",
	"hero_simple_celebration_01",
	"hero_decorative_celebration_03",
	"hero_simple_celebration_03",
	"alert_high_intensity",
	"state_change_confirm_down",
	"navigation_transition_left",
	"notification_simple_01",
	"navigation_forward_selection",
	"navigation_selection_complete_celebration",
	"ui_camera_shutter",
	"navigation_forward_selection_minimal",
	"notification_simple_02",
	"navigation_backward_selection",
	"ui_lock",
	"alert_error_01",
})
local SoundTypeDict = table.freeze({
	hero_simple_celebration_02 = "hero_simple_celebration_02" :: "hero_simple_celebration_02",
	navigation_cancel = "navigation_cancel" :: "navigation_cancel",
	ui_tap_variant_03 = "ui_tap_variant_03" :: "ui_tap_variant_03",
	alert_error_03 = "alert_error_03" :: "alert_error_03",
	notification_ambient = "notification_ambient" :: "notification_ambient",
	state_change_confirm_up = "state_change_confirm_up" :: "state_change_confirm_up",
	ringtone_minimal = "ringtone_minimal" :: "ringtone_minimal",
	hero_decorative_celebration_01 = "hero_decorative_celebration_01" :: "hero_decorative_celebration_01",
	navigation_transition_right = "navigation_transition_right" :: "navigation_transition_right",
	hero_decorative_celebration_02 = "hero_decorative_celebration_02" :: "hero_decorative_celebration_02",
	alert_simple = "alert_simple" :: "alert_simple",
	ui_loading = "ui_loading" :: "ui_loading",
	notification_decorative_01 = "notification_decorative_01" :: "notification_decorative_01",
	notification_high_intensity = "notification_high_intensity" :: "notification_high_intensity",
	navigation_backward_selection_minimal = "navigation_backward_selection_minimal" :: "navigation_backward_selection_minimal",
	navigation_unavailable_selection = "navigation_unavailable_selection" :: "navigation_unavailable_selection",
	ui_unlock = "ui_unlock" :: "ui_unlock",
	notification_decorative_02 = "notification_decorative_02" :: "notification_decorative_02",
	navigation_hover_tap = "navigation_hover_tap" :: "navigation_hover_tap",
	ui_tap_variant_01 = "ui_tap_variant_01" :: "ui_tap_variant_01",
	ui_tap_variant_04 = "ui_tap_variant_04" :: "ui_tap_variant_04",
	ui_tap_variant_02 = "ui_tap_variant_02" :: "ui_tap_variant_02",
	alert_error_02 = "alert_error_02" :: "alert_error_02",
	alarm_gentle = "alarm_gentle" :: "alarm_gentle",
	ui_refresh_feed = "ui_refresh_feed" :: "ui_refresh_feed",
	hero_simple_celebration_01 = "hero_simple_celebration_01" :: "hero_simple_celebration_01",
	hero_decorative_celebration_03 = "hero_decorative_celebration_03" :: "hero_decorative_celebration_03",
	hero_simple_celebration_03 = "hero_simple_celebration_03" :: "hero_simple_celebration_03",
	alert_high_intensity = "alert_high_intensity" :: "alert_high_intensity",
	state_change_confirm_down = "state_change_confirm_down" :: "state_change_confirm_down",
	navigation_transition_left = "navigation_transition_left" :: "navigation_transition_left",
	notification_simple_01 = "notification_simple_01" :: "notification_simple_01",
	navigation_forward_selection = "navigation_forward_selection" :: "navigation_forward_selection",
	navigation_selection_complete_celebration = "navigation_selection_complete_celebration" :: "navigation_selection_complete_celebration",
	ui_camera_shutter = "ui_camera_shutter" :: "ui_camera_shutter",
	navigation_forward_selection_minimal = "navigation_forward_selection_minimal" :: "navigation_forward_selection_minimal",
	notification_simple_02 = "notification_simple_02" :: "notification_simple_02",
	navigation_backward_selection = "navigation_backward_selection" :: "navigation_backward_selection",
	ui_lock = "ui_lock" :: "ui_lock",
	alert_error_01 = "alert_error_01" :: "alert_error_01",
})
local SoundTypeValueDict = table.freeze({
	hero_simple_celebration_02 = 1,
	navigation_cancel = 2,
	ui_tap_variant_03 = 3,
	alert_error_03 = 4,
	notification_ambient = 5,
	state_change_confirm_up = 6,
	ringtone_minimal = 7,
	hero_decorative_celebration_01 = 8,
	navigation_transition_right = 9,
	hero_decorative_celebration_02 = 10,
	alert_simple = 11,
	ui_loading = 12,
	notification_decorative_01 = 13,
	notification_high_intensity = 14,
	navigation_backward_selection_minimal = 15,
	navigation_unavailable_selection = 16,
	ui_unlock = 17,
	notification_decorative_02 = 18,
	navigation_hover_tap = 19,
	ui_tap_variant_01 = 20,
	ui_tap_variant_04 = 21,
	ui_tap_variant_02 = 22,
	alert_error_02 = 23,
	alarm_gentle = 24,
	ui_refresh_feed = 25,
	hero_simple_celebration_01 = 26,
	hero_decorative_celebration_03 = 27,
	hero_simple_celebration_03 = 28,
	alert_high_intensity = 29,
	state_change_confirm_down = 30,
	navigation_transition_left = 31,
	notification_simple_01 = 32,
	navigation_forward_selection = 33,
	navigation_selection_complete_celebration = 34,
	ui_camera_shutter = 35,
	navigation_forward_selection_minimal = 36,
	notification_simple_02 = 37,
	navigation_backward_selection = 38,
	ui_lock = 39,
	alert_error_01 = 40,
})
local SoundTypeInverseValueDict = table.freeze({
	[1] = "hero_simple_celebration_02",
	[2] = "navigation_cancel",
	[3] = "ui_tap_variant_03",
	[4] = "alert_error_03",
	[5] = "notification_ambient",
	[6] = "state_change_confirm_up",
	[7] = "ringtone_minimal",
	[8] = "hero_decorative_celebration_01",
	[9] = "navigation_transition_right",
	[10] = "hero_decorative_celebration_02",
	[11] = "alert_simple",
	[12] = "ui_loading",
	[13] = "notification_decorative_01",
	[14] = "notification_high_intensity",
	[15] = "navigation_backward_selection_minimal",
	[16] = "navigation_unavailable_selection",
	[17] = "ui_unlock",
	[18] = "notification_decorative_02",
	[19] = "navigation_hover_tap",
	[20] = "ui_tap_variant_01",
	[21] = "ui_tap_variant_04",
	[22] = "ui_tap_variant_02",
	[23] = "alert_error_02",
	[24] = "alarm_gentle",
	[25] = "ui_refresh_feed",
	[26] = "hero_simple_celebration_01",
	[27] = "hero_decorative_celebration_03",
	[28] = "hero_simple_celebration_03",
	[29] = "alert_high_intensity",
	[30] = "state_change_confirm_down",
	[31] = "navigation_transition_left",
	[32] = "notification_simple_01",
	[33] = "navigation_forward_selection",
	[34] = "navigation_selection_complete_celebration",
	[35] = "ui_camera_shutter",
	[36] = "navigation_forward_selection_minimal",
	[37] = "notification_simple_02",
	[38] = "navigation_backward_selection",
	[39] = "ui_lock",
	[40] = "alert_error_01",
})
export type PaletteType = "Primary" | "Secondary" | "Tertiary" | "Neutral" | "NeutralVariant" | "Error"
local PaletteTypeList = table.freeze({ "Primary", "Secondary", "Tertiary", "Neutral", "NeutralVariant", "Error" })
local PaletteTypeDict = table.freeze({
	Primary = "Primary" :: "Primary",
	Secondary = "Secondary" :: "Secondary",
	Tertiary = "Tertiary" :: "Tertiary",
	Neutral = "Neutral" :: "Neutral",
	NeutralVariant = "NeutralVariant" :: "NeutralVariant",
	Error = "Error" :: "Error",
})
local PaletteTypeValueDict = table.freeze({
	Primary = 1,
	Secondary = 2,
	Tertiary = 3,
	Neutral = 4,
	NeutralVariant = 5,
	Error = 6,
})
local PaletteTypeInverseValueDict = table.freeze({
	[1] = "Primary",
	[2] = "Secondary",
	[3] = "Tertiary",
	[4] = "Neutral",
	[5] = "NeutralVariant",
	[6] = "Error",
})
export type ButtonRenderType = "Filled" | "Outlined" | "TextIcon"
local ButtonRenderTypeList = table.freeze({ "Filled", "Outlined", "TextIcon" })
local ButtonRenderTypeDict = table.freeze({
	Filled = "Filled" :: "Filled",
	Outlined = "Outlined" :: "Outlined",
	TextIcon = "TextIcon" :: "TextIcon",
})
local ButtonRenderTypeValueDict = table.freeze({
	Filled = 1,
	Outlined = 2,
	TextIcon = 3,
})
local ButtonRenderTypeInverseValueDict = table.freeze({
	[1] = "Filled",
	[2] = "Outlined",
	[3] = "TextIcon",
})
local listTree = {
	SchemeType = SchemeTypeList,
	TransitionDuration = TransitionDurationList,
	TransitionType = TransitionTypeList,
	SelectionState = SelectionStateList,
	ColorRoleType = ColorRoleTypeList,
	ButtonStateType = ButtonStateTypeList,
	CustomColorType = CustomColorTypeList,
	FontType = FontTypeList,
	SoundType = SoundTypeList,
	PaletteType = PaletteTypeList,
	ButtonRenderType = ButtonRenderTypeList,
}
table.freeze(listTree)
local valueTree = {
	SchemeType = SchemeTypeValueDict,
	TransitionDuration = TransitionDurationValueDict,
	TransitionType = TransitionTypeValueDict,
	SelectionState = SelectionStateValueDict,
	ColorRoleType = ColorRoleTypeValueDict,
	ButtonStateType = ButtonStateTypeValueDict,
	CustomColorType = CustomColorTypeValueDict,
	FontType = FontTypeValueDict,
	SoundType = SoundTypeValueDict,
	PaletteType = PaletteTypeValueDict,
	ButtonRenderType = ButtonRenderTypeValueDict,
}
table.freeze(valueTree)
local invValueTree = {
	SchemeType = SchemeTypeInverseValueDict,
	TransitionDuration = TransitionDurationInverseValueDict,
	TransitionType = TransitionTypeInverseValueDict,
	SelectionState = SelectionStateInverseValueDict,
	ColorRoleType = ColorRoleTypeInverseValueDict,
	ButtonStateType = ButtonStateTypeInverseValueDict,
	CustomColorType = CustomColorTypeInverseValueDict,
	FontType = FontTypeInverseValueDict,
	SoundType = SoundTypeInverseValueDict,
	PaletteType = PaletteTypeInverseValueDict,
	ButtonRenderType = ButtonRenderTypeInverseValueDict,
}
table.freeze(invValueTree)
export type EnumName =
	"SchemeType"
	| "TransitionDuration"
	| "TransitionType"
	| "SelectionState"
	| "ColorRoleType"
	| "ButtonStateType"
	| "CustomColorType"
	| "FontType"
	| "SoundType"
	| "PaletteType"
	| "ButtonRenderType"
return {
	getEnumItems = function(enumName: EnumName)
		local list = listTree[enumName]
		assert(list, `invalid enumName: "{enumName}"`)
		return list
	end :: (
		(("SchemeType") -> { SchemeType })
		& (("TransitionDuration") -> { TransitionDuration })
		& (("TransitionType") -> { TransitionType })
		& (("SelectionState") -> { SelectionState })
		& (("ColorRoleType") -> { ColorRoleType })
		& (("ButtonStateType") -> { ButtonStateType })
		& (("CustomColorType") -> { CustomColorType })
		& (("FontType") -> { FontType })
		& (("SoundType") -> { SoundType })
		& (("PaletteType") -> { PaletteType })
		& (("ButtonRenderType") -> { ButtonRenderType })
	),
	getEnumItemFromValue = function(enumName: EnumName, value: number)
		local dict = invValueTree[enumName]
		assert(dict, `invalid enumName: "{enumName}"`)
		local name = dict[value]
		assert(name, `invalid value: "{enumName}" -> {value}`)
		return name
	end :: (
		(("SchemeType", number) -> SchemeType)
		& (("TransitionDuration", number) -> TransitionDuration)
		& (("TransitionType", number) -> TransitionType)
		& (("SelectionState", number) -> SelectionState)
		& (("ColorRoleType", number) -> ColorRoleType)
		& (("ButtonStateType", number) -> ButtonStateType)
		& (("CustomColorType", number) -> CustomColorType)
		& (("FontType", number) -> FontType)
		& (("SoundType", number) -> SoundType)
		& (("PaletteType", number) -> PaletteType)
		& (("ButtonRenderType", number) -> ButtonRenderType)
	),
	getValueFromEnumItem = function(enumName: EnumName, name: string): number
		local dict = valueTree[enumName]
		assert(dict, `invalid enumName: "{enumName}"`)
		local value = dict[name]
		assert(value, `invalid value: "{enumName}" -> "{name}"`)
		return value
	end :: (
		(("SchemeType", SchemeType) -> number)
		& (("TransitionDuration", TransitionDuration) -> number)
		& (("TransitionType", TransitionType) -> number)
		& (("SelectionState", SelectionState) -> number)
		& (("ColorRoleType", ColorRoleType) -> number)
		& (("ButtonStateType", ButtonStateType) -> number)
		& (("CustomColorType", CustomColorType) -> number)
		& (("FontType", FontType) -> number)
		& (("SoundType", SoundType) -> number)
		& (("PaletteType", PaletteType) -> number)
		& (("ButtonRenderType", ButtonRenderType) -> number)
	),
	SchemeType = SchemeTypeDict,
	TransitionDuration = TransitionDurationDict,
	TransitionType = TransitionTypeDict,
	SelectionState = SelectionStateDict,
	ColorRoleType = ColorRoleTypeDict,
	ButtonStateType = ButtonStateTypeDict,
	CustomColorType = CustomColorTypeDict,
	FontType = FontTypeDict,
	SoundType = SoundTypeDict,
	PaletteType = PaletteTypeDict,
	ButtonRenderType = ButtonRenderTypeDict,
}
