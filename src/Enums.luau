--strict
-- this script was generated by nightcycle/pseudo-enum, do not manually edit


export type SoundType = ("hero_simple_celebration_02"

| "navigation_cancel"

| "ui_tap_variant_03"

| "alert_error_03"

| "notification_ambient"

| "state_change_confirm_up"

| "ringtone_minimal"

| "hero_decorative_celebration_01"

| "navigation_transition_right"

| "hero_decorative_celebration_02"

| "alert_simple"

| "ui_loading"

| "notification_decorative_01"

| "notification_high_intensity"

| "navigation_backward_selection_minimal"

| "navigation_unavailable_selection"

| "ui_unlock"

| "notification_decorative_02"

| "navigation_hover_tap"

| "ui_tap_variant_01"

| "ui_tap_variant_04"

| "ui_tap_variant_02"

| "alert_error_02"

| "alarm_gentle"

| "ui_refresh_feed"

| "hero_simple_celebration_01"

| "hero_decorative_celebration_03"

| "hero_simple_celebration_03"

| "alert_high_intensity"

| "state_change_confirm_down"

| "navigation_transition_left"

| "notification_simple_01"

| "navigation_forward_selection"

| "navigation_selection_complete_celebration"

| "ui_camera_shutter"

| "navigation_forward_selection_minimal"

| "notification_simple_02"

| "navigation_backward_selection"

| "ui_lock"

| "alert_error_01"

)

local SoundTypeList = {"hero_simple_celebration_02","navigation_cancel","ui_tap_variant_03","alert_error_03","notification_ambient","state_change_confirm_up","ringtone_minimal","hero_decorative_celebration_01","navigation_transition_right","hero_decorative_celebration_02","alert_simple","ui_loading","notification_decorative_01","notification_high_intensity","navigation_backward_selection_minimal","navigation_unavailable_selection","ui_unlock","notification_decorative_02","navigation_hover_tap","ui_tap_variant_01","ui_tap_variant_04","ui_tap_variant_02","alert_error_02","alarm_gentle","ui_refresh_feed","hero_simple_celebration_01","hero_decorative_celebration_03","hero_simple_celebration_03","alert_high_intensity","state_change_confirm_down","navigation_transition_left","notification_simple_01","navigation_forward_selection","navigation_selection_complete_celebration","ui_camera_shutter","navigation_forward_selection_minimal","notification_simple_02","navigation_backward_selection","ui_lock","alert_error_01",}

export type FontType = ("DisplayLarge"

| "DisplayMedium"

| "DisplaySmall"

| "HeadlineLarge"

| "HeadlineMedium"

| "HeadlineSmall"

| "TitleLarge"

| "TitleMedium"

| "TitleSmall"

| "BodyLarge"

| "BodyMedium"

| "BodySmall"

| "LabelLarge"

| "LabelMedium"

| "LabelSmall"

)

local FontTypeList = {"DisplayLarge","DisplayMedium","DisplaySmall","HeadlineLarge","HeadlineMedium","HeadlineSmall","TitleLarge","TitleMedium","TitleSmall","BodyLarge","BodyMedium","BodySmall","LabelLarge","LabelMedium","LabelSmall",}

export type ButtonStateType = ("Enabled"

| "Disabled"

| "Hovered"

| "Focused"

| "Pressed"

)

local ButtonStateTypeList = {"Enabled","Disabled","Hovered","Focused","Pressed",}

export type SchemeType = ("Light"

| "Dark"

)

local SchemeTypeList = {"Light","Dark",}

export type CustomColorType = ("Custom"

| "OnCustom"

| "CustomContainer"

| "OnCustomContainer"

)

local CustomColorTypeList = {"Custom","OnCustom","CustomContainer","OnCustomContainer",}

export type SelectionState = ("Selected"

| "Unselected"

)

local SelectionStateList = {"Selected","Unselected",}

export type ColorRoleType = ("Primary"

| "OnPrimary"

| "PrimaryContainer"

| "OnPrimaryContainer"

| "Secondary"

| "OnSecondary"

| "SecondaryContainer"

| "OnSecondaryContainer"

| "Tertiary"

| "OnTertiary"

| "TertiaryContainer"

| "OnTertiaryContainer"

| "Error"

| "OnError"

| "ErrorContainer"

| "OnErrorContainer"

| "Background"

| "OnBackground"

| "Surface"

| "OnSurface"

| "SurfaceVariant"

| "OnSurfaceVariant"

| "Outline"

| "OutlineVariant"

| "Shadow"

| "Scrim"

| "InverseSurface"

| "InverseOnSurface"

| "InversePrimary"

| "SurfaceDim"

| "SurfaceBright"

| "SurfaceContainerLowest"

| "SurfaceContainerLow"

| "SurfaceContainer"

| "SurfaceContainerHigh"

| "SurfaceContainerHighest"

| "SurfaceTint"

)

local ColorRoleTypeList = {"Primary","OnPrimary","PrimaryContainer","OnPrimaryContainer","Secondary","OnSecondary","SecondaryContainer","OnSecondaryContainer","Tertiary","OnTertiary","TertiaryContainer","OnTertiaryContainer","Error","OnError","ErrorContainer","OnErrorContainer","Background","OnBackground","Surface","OnSurface","SurfaceVariant","OnSurfaceVariant","Outline","OutlineVariant","Shadow","Scrim","InverseSurface","InverseOnSurface","InversePrimary","SurfaceDim","SurfaceBright","SurfaceContainerLowest","SurfaceContainerLow","SurfaceContainer","SurfaceContainerHigh","SurfaceContainerHighest","SurfaceTint",}

export type PaletteType = ("Primary"

| "Secondary"

| "Tertiary"

| "Neutral"

| "NeutralVariant"

| "Error"

)

local PaletteTypeList = {"Primary","Secondary","Tertiary","Neutral","NeutralVariant","Error",}

export type TransitionType = ("Emphasized"

| "EmphasizedDecelerate"

| "EmphasizedAccelerate"

| "Standard"

| "StandardDecelerate"

| "StandardAccelerate"

)

local TransitionTypeList = {"Emphasized","EmphasizedDecelerate","EmphasizedAccelerate","Standard","StandardDecelerate","StandardAccelerate",}

export type TransitionDuration = ("Short1"

| "Short2"

| "Short3"

| "Short4"

| "Medium1"

| "Medium2"

| "Medium3"

| "Medium4"

| "Long1"

| "Long2"

| "Long3"

| "Long4"

| "ExtraLong1"

| "ExtraLong2"

| "ExtraLong3"

| "ExtraLong4"

)

local TransitionDurationList = {"Short1","Short2","Short3","Short4","Medium1","Medium2","Medium3","Medium4","Long1","Long2","Long3","Long4","ExtraLong1","ExtraLong2","ExtraLong3","ExtraLong4",}
export type EnumName = ("SoundType"

| "FontType"

| "ButtonStateType"

| "SchemeType"

| "CustomColorType"

| "SelectionState"

| "ColorRoleType"

| "PaletteType"

| "TransitionType"

| "TransitionDuration"

)
return {
	getEnumItems = function(enumName: EnumName): {[number]: string}
		if enumName == "SoundType" then
			return table.clone(SoundTypeList)
		elseif enumName == "FontType" then
			return table.clone(FontTypeList)
		elseif enumName == "ButtonStateType" then
			return table.clone(ButtonStateTypeList)
		elseif enumName == "SchemeType" then
			return table.clone(SchemeTypeList)
		elseif enumName == "CustomColorType" then
			return table.clone(CustomColorTypeList)
		elseif enumName == "SelectionState" then
			return table.clone(SelectionStateList)
		elseif enumName == "ColorRoleType" then
			return table.clone(ColorRoleTypeList)
		elseif enumName == "PaletteType" then
			return table.clone(PaletteTypeList)
		elseif enumName == "TransitionType" then
			return table.clone(TransitionTypeList)
		elseif enumName == "TransitionDuration" then
			return table.clone(TransitionDurationList)
		end
		error("bad enum name: "..tostring(enumName))
	end,
	getEnumItemFromValue = function(enumName: EnumName, value: number): string
		if enumName == "SoundType" then
			if SoundTypeList[value] then return SoundTypeList[value] else error("no enum item of value "..tostring(value).." in enum "..tostring(enumName)) end
		elseif enumName == "FontType" then
			if FontTypeList[value] then return FontTypeList[value] else error("no enum item of value "..tostring(value).." in enum "..tostring(enumName)) end
		elseif enumName == "ButtonStateType" then
			if ButtonStateTypeList[value] then return ButtonStateTypeList[value] else error("no enum item of value "..tostring(value).." in enum "..tostring(enumName)) end
		elseif enumName == "SchemeType" then
			if SchemeTypeList[value] then return SchemeTypeList[value] else error("no enum item of value "..tostring(value).." in enum "..tostring(enumName)) end
		elseif enumName == "CustomColorType" then
			if CustomColorTypeList[value] then return CustomColorTypeList[value] else error("no enum item of value "..tostring(value).." in enum "..tostring(enumName)) end
		elseif enumName == "SelectionState" then
			if SelectionStateList[value] then return SelectionStateList[value] else error("no enum item of value "..tostring(value).." in enum "..tostring(enumName)) end
		elseif enumName == "ColorRoleType" then
			if ColorRoleTypeList[value] then return ColorRoleTypeList[value] else error("no enum item of value "..tostring(value).." in enum "..tostring(enumName)) end
		elseif enumName == "PaletteType" then
			if PaletteTypeList[value] then return PaletteTypeList[value] else error("no enum item of value "..tostring(value).." in enum "..tostring(enumName)) end
		elseif enumName == "TransitionType" then
			if TransitionTypeList[value] then return TransitionTypeList[value] else error("no enum item of value "..tostring(value).." in enum "..tostring(enumName)) end
		elseif enumName == "TransitionDuration" then
			if TransitionDurationList[value] then return TransitionDurationList[value] else error("no enum item of value "..tostring(value).." in enum "..tostring(enumName)) end
		end
		error("bad enum name: "..tostring(enumName))
	end,

getValueFromEnumItem = function(enumName: EnumName, enumItem: string): number
		if enumName == "SoundType" then
			local index = table.find(SoundTypeList, enumItem)
			if index then
				assert(index)
				return index
			else
				error("no enumItem "..enumItem.." in SoundType")
			end
		elseif enumName == "FontType" then
			local index = table.find(FontTypeList, enumItem)
			if index then
				assert(index)
				return index
			else
				error("no enumItem "..enumItem.." in FontType")
			end
		elseif enumName == "ButtonStateType" then
			local index = table.find(ButtonStateTypeList, enumItem)
			if index then
				assert(index)
				return index
			else
				error("no enumItem "..enumItem.." in ButtonStateType")
			end
		elseif enumName == "SchemeType" then
			local index = table.find(SchemeTypeList, enumItem)
			if index then
				assert(index)
				return index
			else
				error("no enumItem "..enumItem.." in SchemeType")
			end
		elseif enumName == "CustomColorType" then
			local index = table.find(CustomColorTypeList, enumItem)
			if index then
				assert(index)
				return index
			else
				error("no enumItem "..enumItem.." in CustomColorType")
			end
		elseif enumName == "SelectionState" then
			local index = table.find(SelectionStateList, enumItem)
			if index then
				assert(index)
				return index
			else
				error("no enumItem "..enumItem.." in SelectionState")
			end
		elseif enumName == "ColorRoleType" then
			local index = table.find(ColorRoleTypeList, enumItem)
			if index then
				assert(index)
				return index
			else
				error("no enumItem "..enumItem.." in ColorRoleType")
			end
		elseif enumName == "PaletteType" then
			local index = table.find(PaletteTypeList, enumItem)
			if index then
				assert(index)
				return index
			else
				error("no enumItem "..enumItem.." in PaletteType")
			end
		elseif enumName == "TransitionType" then
			local index = table.find(TransitionTypeList, enumItem)
			if index then
				assert(index)
				return index
			else
				error("no enumItem "..enumItem.." in TransitionType")
			end
		elseif enumName == "TransitionDuration" then
			local index = table.find(TransitionDurationList, enumItem)
			if index then
				assert(index)
				return index
			else
				error("no enumItem "..enumItem.." in TransitionDuration")
			end
		end
		error("bad enum name: "..tostring(enumName))
	end,
SoundType = {
	["hero_simple_celebration_02"] = "hero_simple_celebration_02",
	["navigation_cancel"] = "navigation_cancel",
	["ui_tap_variant_03"] = "ui_tap_variant_03",
	["alert_error_03"] = "alert_error_03",
	["notification_ambient"] = "notification_ambient",
	["state_change_confirm_up"] = "state_change_confirm_up",
	["ringtone_minimal"] = "ringtone_minimal",
	["hero_decorative_celebration_01"] = "hero_decorative_celebration_01",
	["navigation_transition_right"] = "navigation_transition_right",
	["hero_decorative_celebration_02"] = "hero_decorative_celebration_02",
	["alert_simple"] = "alert_simple",
	["ui_loading"] = "ui_loading",
	["notification_decorative_01"] = "notification_decorative_01",
	["notification_high_intensity"] = "notification_high_intensity",
	["navigation_backward_selection_minimal"] = "navigation_backward_selection_minimal",
	["navigation_unavailable_selection"] = "navigation_unavailable_selection",
	["ui_unlock"] = "ui_unlock",
	["notification_decorative_02"] = "notification_decorative_02",
	["navigation_hover_tap"] = "navigation_hover_tap",
	["ui_tap_variant_01"] = "ui_tap_variant_01",
	["ui_tap_variant_04"] = "ui_tap_variant_04",
	["ui_tap_variant_02"] = "ui_tap_variant_02",
	["alert_error_02"] = "alert_error_02",
	["alarm_gentle"] = "alarm_gentle",
	["ui_refresh_feed"] = "ui_refresh_feed",
	["hero_simple_celebration_01"] = "hero_simple_celebration_01",
	["hero_decorative_celebration_03"] = "hero_decorative_celebration_03",
	["hero_simple_celebration_03"] = "hero_simple_celebration_03",
	["alert_high_intensity"] = "alert_high_intensity",
	["state_change_confirm_down"] = "state_change_confirm_down",
	["navigation_transition_left"] = "navigation_transition_left",
	["notification_simple_01"] = "notification_simple_01",
	["navigation_forward_selection"] = "navigation_forward_selection",
	["navigation_selection_complete_celebration"] = "navigation_selection_complete_celebration",
	["ui_camera_shutter"] = "ui_camera_shutter",
	["navigation_forward_selection_minimal"] = "navigation_forward_selection_minimal",
	["notification_simple_02"] = "notification_simple_02",
	["navigation_backward_selection"] = "navigation_backward_selection",
	["ui_lock"] = "ui_lock",
	["alert_error_01"] = "alert_error_01",
},
FontType = {
	["DisplayLarge"] = "DisplayLarge",
	["DisplayMedium"] = "DisplayMedium",
	["DisplaySmall"] = "DisplaySmall",
	["HeadlineLarge"] = "HeadlineLarge",
	["HeadlineMedium"] = "HeadlineMedium",
	["HeadlineSmall"] = "HeadlineSmall",
	["TitleLarge"] = "TitleLarge",
	["TitleMedium"] = "TitleMedium",
	["TitleSmall"] = "TitleSmall",
	["BodyLarge"] = "BodyLarge",
	["BodyMedium"] = "BodyMedium",
	["BodySmall"] = "BodySmall",
	["LabelLarge"] = "LabelLarge",
	["LabelMedium"] = "LabelMedium",
	["LabelSmall"] = "LabelSmall",
},
ButtonStateType = {
	["Enabled"] = "Enabled",
	["Disabled"] = "Disabled",
	["Hovered"] = "Hovered",
	["Focused"] = "Focused",
	["Pressed"] = "Pressed",
},
SchemeType = {
	["Light"] = "Light",
	["Dark"] = "Dark",
},
CustomColorType = {
	["Custom"] = "Custom",
	["OnCustom"] = "OnCustom",
	["CustomContainer"] = "CustomContainer",
	["OnCustomContainer"] = "OnCustomContainer",
},
SelectionState = {
	["Selected"] = "Selected",
	["Unselected"] = "Unselected",
},
ColorRoleType = {
	["Primary"] = "Primary",
	["OnPrimary"] = "OnPrimary",
	["PrimaryContainer"] = "PrimaryContainer",
	["OnPrimaryContainer"] = "OnPrimaryContainer",
	["Secondary"] = "Secondary",
	["OnSecondary"] = "OnSecondary",
	["SecondaryContainer"] = "SecondaryContainer",
	["OnSecondaryContainer"] = "OnSecondaryContainer",
	["Tertiary"] = "Tertiary",
	["OnTertiary"] = "OnTertiary",
	["TertiaryContainer"] = "TertiaryContainer",
	["OnTertiaryContainer"] = "OnTertiaryContainer",
	["Error"] = "Error",
	["OnError"] = "OnError",
	["ErrorContainer"] = "ErrorContainer",
	["OnErrorContainer"] = "OnErrorContainer",
	["Background"] = "Background",
	["OnBackground"] = "OnBackground",
	["Surface"] = "Surface",
	["OnSurface"] = "OnSurface",
	["SurfaceVariant"] = "SurfaceVariant",
	["OnSurfaceVariant"] = "OnSurfaceVariant",
	["Outline"] = "Outline",
	["OutlineVariant"] = "OutlineVariant",
	["Shadow"] = "Shadow",
	["Scrim"] = "Scrim",
	["InverseSurface"] = "InverseSurface",
	["InverseOnSurface"] = "InverseOnSurface",
	["InversePrimary"] = "InversePrimary",
	["SurfaceDim"] = "SurfaceDim",
	["SurfaceBright"] = "SurfaceBright",
	["SurfaceContainerLowest"] = "SurfaceContainerLowest",
	["SurfaceContainerLow"] = "SurfaceContainerLow",
	["SurfaceContainer"] = "SurfaceContainer",
	["SurfaceContainerHigh"] = "SurfaceContainerHigh",
	["SurfaceContainerHighest"] = "SurfaceContainerHighest",
	["SurfaceTint"] = "SurfaceTint",
},
PaletteType = {
	["Primary"] = "Primary",
	["Secondary"] = "Secondary",
	["Tertiary"] = "Tertiary",
	["Neutral"] = "Neutral",
	["NeutralVariant"] = "NeutralVariant",
	["Error"] = "Error",
},
TransitionType = {
	["Emphasized"] = "Emphasized",
	["EmphasizedDecelerate"] = "EmphasizedDecelerate",
	["EmphasizedAccelerate"] = "EmphasizedAccelerate",
	["Standard"] = "Standard",
	["StandardDecelerate"] = "StandardDecelerate",
	["StandardAccelerate"] = "StandardAccelerate",
},
TransitionDuration = {
	["Short1"] = "Short1",
	["Short2"] = "Short2",
	["Short3"] = "Short3",
	["Short4"] = "Short4",
	["Medium1"] = "Medium1",
	["Medium2"] = "Medium2",
	["Medium3"] = "Medium3",
	["Medium4"] = "Medium4",
	["Long1"] = "Long1",
	["Long2"] = "Long2",
	["Long3"] = "Long3",
	["Long4"] = "Long4",
	["ExtraLong1"] = "ExtraLong1",
	["ExtraLong2"] = "ExtraLong2",
	["ExtraLong3"] = "ExtraLong3",
	["ExtraLong4"] = "ExtraLong4",
},
}