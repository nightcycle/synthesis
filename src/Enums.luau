--strict
-- this script was generated by nightcycle/pseudo-enum, do not manually edit


export type FontType = ("DisplayLarge"

| "DisplayMedium"

| "DisplaySmall"

| "HeadlineLarge"

| "HeadlineMedium"

| "HeadlineSmall"

| "TitleLarge"

| "TitleMedium"

| "TitleSmall"

| "BodyLarge"

| "BodyMedium"

| "BodySmall"

| "LabelLarge"

| "LabelMedium"

| "LabelSmall"

)

local FontTypeList = {"DisplayLarge","DisplayMedium","DisplaySmall","HeadlineLarge","HeadlineMedium","HeadlineSmall","TitleLarge","TitleMedium","TitleSmall","BodyLarge","BodyMedium","BodySmall","LabelLarge","LabelMedium","LabelSmall",}

export type ButtonStateType = ("Enabled"

| "Disabled"

| "Hovered"

| "Focused"

| "Pressed"

)

local ButtonStateTypeList = {"Enabled","Disabled","Hovered","Focused","Pressed",}

export type SchemeType = ("Light"

| "Dark"

)

local SchemeTypeList = {"Light","Dark",}

export type ColorRoleType = ("Primary"

| "Secondary"

| "Tertiary"

| "Error"

| "Background"

| "Surface"

| "Outline"

| "Shadow"

| "Scrim"

)

local ColorRoleTypeList = {"Primary","Secondary","Tertiary","Error","Background","Surface","Outline","Shadow","Scrim",}

export type ColorContextType = ("Default"

| "On"

| "Container"

| "OnContainer"

| "Surface"

| "Dim"

| "Bright"

| "Lowest"

| "Low"

| "High"

| "Highest"

| "Tint"

| "Variant"

| "OnVariant"

| "Inverse"

| "InverseOn"

)

local ColorContextTypeList = {"Default","On","Container","OnContainer","Surface","Dim","Bright","Lowest","Low","High","Highest","Tint","Variant","OnVariant","Inverse","InverseOn",}

export type PaletteType = ("Primary"

| "Secondary"

| "Tertiary"

| "Neutral"

| "NeutralVariant"

| "Error"

)

local PaletteTypeList = {"Primary","Secondary","Tertiary","Neutral","NeutralVariant","Error",}
export type EnumName = ("FontType"

| "ButtonStateType"

| "SchemeType"

| "ColorRoleType"

| "ColorContextType"

| "PaletteType"

)
return {
	getEnumItems = function(enumName: EnumName): {[number]: string}
		if enumName == "FontType" then
			return table.clone(FontTypeList)
		elseif enumName == "ButtonStateType" then
			return table.clone(ButtonStateTypeList)
		elseif enumName == "SchemeType" then
			return table.clone(SchemeTypeList)
		elseif enumName == "ColorRoleType" then
			return table.clone(ColorRoleTypeList)
		elseif enumName == "ColorContextType" then
			return table.clone(ColorContextTypeList)
		elseif enumName == "PaletteType" then
			return table.clone(PaletteTypeList)
		end
		error("bad enum name: "..tostring(enumName))
	end,
	getEnumItemFromValue = function(enumName: EnumName, value: number): string
		if enumName == "FontType" then
			if FontTypeList[value] then return FontTypeList[value] else error("no enum item of value "..tostring(value).." in enum "..tostring(enumName)) end
		elseif enumName == "ButtonStateType" then
			if ButtonStateTypeList[value] then return ButtonStateTypeList[value] else error("no enum item of value "..tostring(value).." in enum "..tostring(enumName)) end
		elseif enumName == "SchemeType" then
			if SchemeTypeList[value] then return SchemeTypeList[value] else error("no enum item of value "..tostring(value).." in enum "..tostring(enumName)) end
		elseif enumName == "ColorRoleType" then
			if ColorRoleTypeList[value] then return ColorRoleTypeList[value] else error("no enum item of value "..tostring(value).." in enum "..tostring(enumName)) end
		elseif enumName == "ColorContextType" then
			if ColorContextTypeList[value] then return ColorContextTypeList[value] else error("no enum item of value "..tostring(value).." in enum "..tostring(enumName)) end
		elseif enumName == "PaletteType" then
			if PaletteTypeList[value] then return PaletteTypeList[value] else error("no enum item of value "..tostring(value).." in enum "..tostring(enumName)) end
		end
		error("bad enum name: "..tostring(enumName))
	end,

getValueFromEnumItem = function(enumName: EnumName, enumItem: string): number
		if enumName == "FontType" then
			local index = table.find(FontTypeList, enumItem)
			if index then
				assert(index)
				return index
			else
				error("no enumItem "..enumItem.." in FontType")
			end
		elseif enumName == "ButtonStateType" then
			local index = table.find(ButtonStateTypeList, enumItem)
			if index then
				assert(index)
				return index
			else
				error("no enumItem "..enumItem.." in ButtonStateType")
			end
		elseif enumName == "SchemeType" then
			local index = table.find(SchemeTypeList, enumItem)
			if index then
				assert(index)
				return index
			else
				error("no enumItem "..enumItem.." in SchemeType")
			end
		elseif enumName == "ColorRoleType" then
			local index = table.find(ColorRoleTypeList, enumItem)
			if index then
				assert(index)
				return index
			else
				error("no enumItem "..enumItem.." in ColorRoleType")
			end
		elseif enumName == "ColorContextType" then
			local index = table.find(ColorContextTypeList, enumItem)
			if index then
				assert(index)
				return index
			else
				error("no enumItem "..enumItem.." in ColorContextType")
			end
		elseif enumName == "PaletteType" then
			local index = table.find(PaletteTypeList, enumItem)
			if index then
				assert(index)
				return index
			else
				error("no enumItem "..enumItem.." in PaletteType")
			end
		end
		error("bad enum name: "..tostring(enumName))
	end,
FontType = {
	["DisplayLarge"] = "DisplayLarge",
	["DisplayMedium"] = "DisplayMedium",
	["DisplaySmall"] = "DisplaySmall",
	["HeadlineLarge"] = "HeadlineLarge",
	["HeadlineMedium"] = "HeadlineMedium",
	["HeadlineSmall"] = "HeadlineSmall",
	["TitleLarge"] = "TitleLarge",
	["TitleMedium"] = "TitleMedium",
	["TitleSmall"] = "TitleSmall",
	["BodyLarge"] = "BodyLarge",
	["BodyMedium"] = "BodyMedium",
	["BodySmall"] = "BodySmall",
	["LabelLarge"] = "LabelLarge",
	["LabelMedium"] = "LabelMedium",
	["LabelSmall"] = "LabelSmall",
},
ButtonStateType = {
	["Enabled"] = "Enabled",
	["Disabled"] = "Disabled",
	["Hovered"] = "Hovered",
	["Focused"] = "Focused",
	["Pressed"] = "Pressed",
},
SchemeType = {
	["Light"] = "Light",
	["Dark"] = "Dark",
},
ColorRoleType = {
	["Primary"] = "Primary",
	["Secondary"] = "Secondary",
	["Tertiary"] = "Tertiary",
	["Error"] = "Error",
	["Background"] = "Background",
	["Surface"] = "Surface",
	["Outline"] = "Outline",
	["Shadow"] = "Shadow",
	["Scrim"] = "Scrim",
},
ColorContextType = {
	["Default"] = "Default",
	["On"] = "On",
	["Container"] = "Container",
	["OnContainer"] = "OnContainer",
	["Surface"] = "Surface",
	["Dim"] = "Dim",
	["Bright"] = "Bright",
	["Lowest"] = "Lowest",
	["Low"] = "Low",
	["High"] = "High",
	["Highest"] = "Highest",
	["Tint"] = "Tint",
	["Variant"] = "Variant",
	["OnVariant"] = "OnVariant",
	["Inverse"] = "Inverse",
	["InverseOn"] = "InverseOn",
},
PaletteType = {
	["Primary"] = "Primary",
	["Secondary"] = "Secondary",
	["Tertiary"] = "Tertiary",
	["Neutral"] = "Neutral",
	["NeutralVariant"] = "NeutralVariant",
	["Error"] = "Error",
},
}