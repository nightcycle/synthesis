--strict
-- this script was generated by nightcycle/pseudo-enum, do not manually edit

export type FontType = "DisplayLarge"
 | "DisplayMedium"
 | "DisplaySmall"
 | "HeadlineLarge"
 | "HeadlineMedium"
 | "HeadlineSmall"
 | "TitleLarge"
 | "TitleMedium"
 | "TitleSmall"
 | "BodyLarge"
 | "BodyMedium"
 | "BodySmall"
 | "LabelLarge"
 | "LabelMedium"
 | "LabelSmall"

local FontTypeList = {
	"DisplayLarge",
	"DisplayMedium",
	"DisplaySmall",
	"HeadlineLarge",
	"HeadlineMedium",
	"HeadlineSmall",
	"TitleLarge",
	"TitleMedium",
	"TitleSmall",
	"BodyLarge",
	"BodyMedium",
	"BodySmall",
	"LabelLarge",
	"LabelMedium",
	"LabelSmall",
}

export type ButtonStateType = "Enabled"
 | "Disabled"
 | "Hovered"
 | "Focused"
 | "Pressed"

local ButtonStateTypeList = { "Enabled", "Disabled", "Hovered", "Focused", "Pressed" }

export type SchemeType = "Light"
 | "Dark"

local SchemeTypeList = { "Light", "Dark" }

export type CustomColorType = "Custom"
 | "OnCustom"
 | "CustomContainer"
 | "OnCustomContainer"

local CustomColorTypeList = { "Custom", "OnCustom", "CustomContainer", "OnCustomContainer" }

export type SelectionState = "Selected"
 | "Unselected"

local SelectionStateList = { "Selected", "Unselected" }

export type ColorRoleType = "Primary"
 | "OnPrimary"
 | "PrimaryContainer"
 | "OnPrimaryContainer"
 | "Secondary"
 | "OnSecondary"
 | "SecondaryContainer"
 | "OnSecondaryContainer"
 | "Tertiary"
 | "OnTertiary"
 | "TertiaryContainer"
 | "OnTertiaryContainer"
 | "Error"
 | "OnError"
 | "ErrorContainer"
 | "OnErrorContainer"
 | "Background"
 | "OnBackground"
 | "Surface"
 | "OnSurface"
 | "SurfaceVariant"
 | "OnSurfaceVariant"
 | "Outline"
 | "OutlineVariant"
 | "Shadow"
 | "Scrim"
 | "InverseSurface"
 | "InverseOnSurface"
 | "InversePrimary"
 | "SurfaceDim"
 | "SurfaceBright"
 | "SurfaceContainerLowest"
 | "SurfaceContainerLow"
 | "SurfaceContainer"
 | "SurfaceContainerHigh"
 | "SurfaceContainerHighest"
 | "SurfaceTint"

local ColorRoleTypeList = {
	"Primary",
	"OnPrimary",
	"PrimaryContainer",
	"OnPrimaryContainer",
	"Secondary",
	"OnSecondary",
	"SecondaryContainer",
	"OnSecondaryContainer",
	"Tertiary",
	"OnTertiary",
	"TertiaryContainer",
	"OnTertiaryContainer",
	"Error",
	"OnError",
	"ErrorContainer",
	"OnErrorContainer",
	"Background",
	"OnBackground",
	"Surface",
	"OnSurface",
	"SurfaceVariant",
	"OnSurfaceVariant",
	"Outline",
	"OutlineVariant",
	"Shadow",
	"Scrim",
	"InverseSurface",
	"InverseOnSurface",
	"InversePrimary",
	"SurfaceDim",
	"SurfaceBright",
	"SurfaceContainerLowest",
	"SurfaceContainerLow",
	"SurfaceContainer",
	"SurfaceContainerHigh",
	"SurfaceContainerHighest",
	"SurfaceTint",
}

export type PaletteType = "Primary"
 | "Secondary"
 | "Tertiary"
 | "Neutral"
 | "NeutralVariant"
 | "Error"

local PaletteTypeList = { "Primary", "Secondary", "Tertiary", "Neutral", "NeutralVariant", "Error" }
export type EnumName = "FontType"
 | "ButtonStateType"
 | "SchemeType"
 | "CustomColorType"
 | "SelectionState"
 | "ColorRoleType"
 | "PaletteType"
return {
	getEnumItems = function(enumName: EnumName): { [number]: string }
		if enumName == "FontType" then
			return table.clone(FontTypeList)
		elseif enumName == "ButtonStateType" then
			return table.clone(ButtonStateTypeList)
		elseif enumName == "SchemeType" then
			return table.clone(SchemeTypeList)
		elseif enumName == "CustomColorType" then
			return table.clone(CustomColorTypeList)
		elseif enumName == "SelectionState" then
			return table.clone(SelectionStateList)
		elseif enumName == "ColorRoleType" then
			return table.clone(ColorRoleTypeList)
		elseif enumName == "PaletteType" then
			return table.clone(PaletteTypeList)
		end
		error("bad enum name: " .. tostring(enumName))
	end,
	getEnumItemFromValue = function(enumName: EnumName, value: number): string
		if enumName == "FontType" then
			if FontTypeList[value] then
				return FontTypeList[value]
			else
				error("no enum item of value " .. tostring(value) .. " in enum " .. tostring(enumName))
			end
		elseif enumName == "ButtonStateType" then
			if ButtonStateTypeList[value] then
				return ButtonStateTypeList[value]
			else
				error("no enum item of value " .. tostring(value) .. " in enum " .. tostring(enumName))
			end
		elseif enumName == "SchemeType" then
			if SchemeTypeList[value] then
				return SchemeTypeList[value]
			else
				error("no enum item of value " .. tostring(value) .. " in enum " .. tostring(enumName))
			end
		elseif enumName == "CustomColorType" then
			if CustomColorTypeList[value] then
				return CustomColorTypeList[value]
			else
				error("no enum item of value " .. tostring(value) .. " in enum " .. tostring(enumName))
			end
		elseif enumName == "SelectionState" then
			if SelectionStateList[value] then
				return SelectionStateList[value]
			else
				error("no enum item of value " .. tostring(value) .. " in enum " .. tostring(enumName))
			end
		elseif enumName == "ColorRoleType" then
			if ColorRoleTypeList[value] then
				return ColorRoleTypeList[value]
			else
				error("no enum item of value " .. tostring(value) .. " in enum " .. tostring(enumName))
			end
		elseif enumName == "PaletteType" then
			if PaletteTypeList[value] then
				return PaletteTypeList[value]
			else
				error("no enum item of value " .. tostring(value) .. " in enum " .. tostring(enumName))
			end
		end
		error("bad enum name: " .. tostring(enumName))
	end,

	getValueFromEnumItem = function(enumName: EnumName, enumItem: string): number
		if enumName == "FontType" then
			local index = table.find(FontTypeList, enumItem)
			if index then
				assert(index)
				return index
			else
				error("no enumItem " .. enumItem .. " in FontType")
			end
		elseif enumName == "ButtonStateType" then
			local index = table.find(ButtonStateTypeList, enumItem)
			if index then
				assert(index)
				return index
			else
				error("no enumItem " .. enumItem .. " in ButtonStateType")
			end
		elseif enumName == "SchemeType" then
			local index = table.find(SchemeTypeList, enumItem)
			if index then
				assert(index)
				return index
			else
				error("no enumItem " .. enumItem .. " in SchemeType")
			end
		elseif enumName == "CustomColorType" then
			local index = table.find(CustomColorTypeList, enumItem)
			if index then
				assert(index)
				return index
			else
				error("no enumItem " .. enumItem .. " in CustomColorType")
			end
		elseif enumName == "SelectionState" then
			local index = table.find(SelectionStateList, enumItem)
			if index then
				assert(index)
				return index
			else
				error("no enumItem " .. enumItem .. " in SelectionState")
			end
		elseif enumName == "ColorRoleType" then
			local index = table.find(ColorRoleTypeList, enumItem)
			if index then
				assert(index)
				return index
			else
				error("no enumItem " .. enumItem .. " in ColorRoleType")
			end
		elseif enumName == "PaletteType" then
			local index = table.find(PaletteTypeList, enumItem)
			if index then
				assert(index)
				return index
			else
				error("no enumItem " .. enumItem .. " in PaletteType")
			end
		end
		error("bad enum name: " .. tostring(enumName))
	end,
	FontType = {
		["DisplayLarge"] = "DisplayLarge",
		["DisplayMedium"] = "DisplayMedium",
		["DisplaySmall"] = "DisplaySmall",
		["HeadlineLarge"] = "HeadlineLarge",
		["HeadlineMedium"] = "HeadlineMedium",
		["HeadlineSmall"] = "HeadlineSmall",
		["TitleLarge"] = "TitleLarge",
		["TitleMedium"] = "TitleMedium",
		["TitleSmall"] = "TitleSmall",
		["BodyLarge"] = "BodyLarge",
		["BodyMedium"] = "BodyMedium",
		["BodySmall"] = "BodySmall",
		["LabelLarge"] = "LabelLarge",
		["LabelMedium"] = "LabelMedium",
		["LabelSmall"] = "LabelSmall",
	},
	ButtonStateType = {
		["Enabled"] = "Enabled",
		["Disabled"] = "Disabled",
		["Hovered"] = "Hovered",
		["Focused"] = "Focused",
		["Pressed"] = "Pressed",
	},
	SchemeType = {
		["Light"] = "Light",
		["Dark"] = "Dark",
	},
	CustomColorType = {
		["Custom"] = "Custom",
		["OnCustom"] = "OnCustom",
		["CustomContainer"] = "CustomContainer",
		["OnCustomContainer"] = "OnCustomContainer",
	},
	SelectionState = {
		["Selected"] = "Selected",
		["Unselected"] = "Unselected",
	},
	ColorRoleType = {
		["Primary"] = "Primary",
		["OnPrimary"] = "OnPrimary",
		["PrimaryContainer"] = "PrimaryContainer",
		["OnPrimaryContainer"] = "OnPrimaryContainer",
		["Secondary"] = "Secondary",
		["OnSecondary"] = "OnSecondary",
		["SecondaryContainer"] = "SecondaryContainer",
		["OnSecondaryContainer"] = "OnSecondaryContainer",
		["Tertiary"] = "Tertiary",
		["OnTertiary"] = "OnTertiary",
		["TertiaryContainer"] = "TertiaryContainer",
		["OnTertiaryContainer"] = "OnTertiaryContainer",
		["Error"] = "Error",
		["OnError"] = "OnError",
		["ErrorContainer"] = "ErrorContainer",
		["OnErrorContainer"] = "OnErrorContainer",
		["Background"] = "Background",
		["OnBackground"] = "OnBackground",
		["Surface"] = "Surface",
		["OnSurface"] = "OnSurface",
		["SurfaceVariant"] = "SurfaceVariant",
		["OnSurfaceVariant"] = "OnSurfaceVariant",
		["Outline"] = "Outline",
		["OutlineVariant"] = "OutlineVariant",
		["Shadow"] = "Shadow",
		["Scrim"] = "Scrim",
		["InverseSurface"] = "InverseSurface",
		["InverseOnSurface"] = "InverseOnSurface",
		["InversePrimary"] = "InversePrimary",
		["SurfaceDim"] = "SurfaceDim",
		["SurfaceBright"] = "SurfaceBright",
		["SurfaceContainerLowest"] = "SurfaceContainerLowest",
		["SurfaceContainerLow"] = "SurfaceContainerLow",
		["SurfaceContainer"] = "SurfaceContainer",
		["SurfaceContainerHigh"] = "SurfaceContainerHigh",
		["SurfaceContainerHighest"] = "SurfaceContainerHighest",
		["SurfaceTint"] = "SurfaceTint",
	},
	PaletteType = {
		["Primary"] = "Primary",
		["Secondary"] = "Secondary",
		["Tertiary"] = "Tertiary",
		["Neutral"] = "Neutral",
		["NeutralVariant"] = "NeutralVariant",
		["Error"] = "Error",
	},
}
