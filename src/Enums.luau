--strict
-- this script was generated by nightcycle/pseudo-enum, do not manually edit

export type ButtonStateType = "Enabled" | "Disabled" | "Hovered" | "Focused" | "Pressed"

local ButtonStateTypeList = { "Enabled", "Disabled", "Hovered", "Focused", "Pressed" }
export type EnumName = "ButtonStateType"
return {
	getEnumItems = function(enumName: EnumName): { [number]: string }
		if enumName == "ButtonStateType" then
			return table.clone(ButtonStateTypeList)
		end
		error("bad enum name: " .. tostring(enumName))
	end,
	getEnumItemFromValue = function(enumName: EnumName, value: number): string
		if enumName == "ButtonStateType" then
			if ButtonStateTypeList[value] then
				return ButtonStateTypeList[value]
			else
				error("no enum item of value " .. tostring(value) .. " in enum " .. tostring(enumName))
			end
		end
		error("bad enum name: " .. tostring(enumName))
	end,

	getValueFromEnumItem = function(enumName: EnumName, enumItem: string): number
		if enumName == "ButtonStateType" then
			local index = table.find(ButtonStateTypeList, enumItem)
			if index then
				assert(index)
				return index
			else
				error("no enumItem " .. enumItem .. " in ButtonStateType")
			end
		end
		error("bad enum name: " .. tostring(enumName))
	end,
	ButtonStateType = {
		["Enabled"] = "Enabled",
		["Disabled"] = "Disabled",
		["Hovered"] = "Hovered",
		["Focused"] = "Focused",
		["Pressed"] = "Pressed",
	},
}
