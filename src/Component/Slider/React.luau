--!strict
-- this script was generated by the build system, please do not make manual edits
local _Package = script.Parent.Parent.Parent
local _Packages = _Package.Parent
-- Services
-- Packages
local Maid = require(_Packages:WaitForChild("Maid"))
local ColdFusion = require(_Packages:WaitForChild("ColdFusion"))

local React = require(_Packages:WaitForChild("React"))
local ReactRoblox = require(_Packages:WaitForChild("ReactRoblox"))

-- Modules
local Types = require(_Package:WaitForChild("Types"))
local Style = require(_Package:WaitForChild("Style"))

local Source = require(script.Parent:WaitForChild("ColdFusion"))

-- Types
type Maid = Maid.Maid
type Style = Style.Style
type FontData = Types.FontData
type OptionData = Types.OptionData
type ButtonData = Types.ButtonData
type ImageData = Types.ImageData
type CanBeState<V> = ColdFusion.CanBeState<V>
-- Constants
local DEFAULTS = require(script.Parent:WaitForChild("Defaults"))
-- Variables
-- References
-- Private Functions
-- Class
local Interface = {}

do
	local NewSlider = React.Component:extend("NewSlider")
	NewSlider.defaultProps = {
		onChange = DEFAULTS.NEW.ON_CHANGE,
		initialValue = DEFAULTS.NEW.INITIAL_VALUE,
		minimum = DEFAULTS.NEW.MINIMUM,
		maximum = DEFAULTS.NEW.MAXIMUM,
		increment = DEFAULTS.NEW.INCREMENT,
		leftTextOrIcon = DEFAULTS.NEW.LEFT_TEXT_OR_ICON,
		rightTextOrIcon = DEFAULTS.NEW.RIGHT_TEXT_OR_ICON,
		onBackgroundColor = DEFAULTS.NEW.ON_BACKGROUND_COLOR,
		onBackgroundTextColor = DEFAULTS.NEW.ON_BACKGROUND_TEXT_COLOR,
		fillColor = DEFAULTS.NEW.FILL_COLOR,
		fillContainerColor = DEFAULTS.NEW.FILL_CONTAINER_COLOR,
		elevation = DEFAULTS.NEW.ELEVATION,
		schemeType = DEFAULTS.NEW.SCHEME_TYPE,
		fontData = DEFAULTS.NEW.FONT_DATA,
		scale = DEFAULTS.NEW.SCALE,
	}
	function NewSlider:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			onChange = _Value(self.defaultProps.onChange),
			initialValue = _Value(self.defaultProps.initialValue),
			minimum = _Value(self.defaultProps.minimum),
			maximum = _Value(self.defaultProps.maximum),
			increment = _Value(self.defaultProps.increment),
			leftTextOrIcon = _Value(self.defaultProps.leftTextOrIcon),
			rightTextOrIcon = _Value(self.defaultProps.rightTextOrIcon),
			onBackgroundColor = _Value(self.defaultProps.onBackgroundColor),
			onBackgroundTextColor = _Value(self.defaultProps.onBackgroundTextColor),
			fillColor = _Value(self.defaultProps.fillColor),
			fillContainerColor = _Value(self.defaultProps.fillContainerColor),
			elevation = _Value(self.defaultProps.elevation),
			schemeType = _Value(self.defaultProps.schemeType),
			fontData = _Value(self.defaultProps.fontData),
			scale = _Value(self.defaultProps.scale),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.new(
			self._internalStates.onChange,
			self._internalStates.initialValue,
			self._internalStates.minimum,
			self._internalStates.maximum,
			self._internalStates.increment,
			self._internalStates.leftTextOrIcon,
			self._internalStates.rightTextOrIcon,
			self._internalStates.onBackgroundColor,
			self._internalStates.onBackgroundTextColor,
			self._internalStates.fillColor,
			self._internalStates.fillContainerColor,
			self._internalStates.elevation,
			self._internalStates.schemeType,
			self._internalStates.fontData,
			self._internalStates.scale
		)
	end

	function NewSlider:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return React.createElement(ReactRoblox.createPortal, props)
	end
	function NewSlider:componentDidMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function NewSlider:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.New = NewSlider
end

do
	local PrimarySlider = React.Component:extend("PrimarySlider")
	PrimarySlider.defaultProps = {
		style = DEFAULTS.PRIMARY.STYLE,
		onChange = DEFAULTS.PRIMARY.ON_CHANGE,
		initialValue = DEFAULTS.PRIMARY.INITIAL_VALUE,
		minimum = DEFAULTS.PRIMARY.MINIMUM,
		maximum = DEFAULTS.PRIMARY.MAXIMUM,
		increment = DEFAULTS.PRIMARY.INCREMENT,
		leftTextOrIcon = DEFAULTS.PRIMARY.LEFT_TEXT_OR_ICON,
		rightTextOrIcon = DEFAULTS.PRIMARY.RIGHT_TEXT_OR_ICON,
		elevation = DEFAULTS.PRIMARY.ELEVATION,
	}
	function PrimarySlider:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			style = _Value(self.defaultProps.style),
			onChange = _Value(self.defaultProps.onChange),
			initialValue = _Value(self.defaultProps.initialValue),
			minimum = _Value(self.defaultProps.minimum),
			maximum = _Value(self.defaultProps.maximum),
			increment = _Value(self.defaultProps.increment),
			leftTextOrIcon = _Value(self.defaultProps.leftTextOrIcon),
			rightTextOrIcon = _Value(self.defaultProps.rightTextOrIcon),
			elevation = _Value(self.defaultProps.elevation),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.primary(
			self._internalStates.style,
			self._internalStates.onChange,
			self._internalStates.initialValue,
			self._internalStates.minimum,
			self._internalStates.maximum,
			self._internalStates.increment,
			self._internalStates.leftTextOrIcon,
			self._internalStates.rightTextOrIcon,
			self._internalStates.elevation
		)
	end

	function PrimarySlider:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return React.createElement(ReactRoblox.createPortal, props)
	end
	function PrimarySlider:componentDidMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function PrimarySlider:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.Primary = PrimarySlider
end

do
	local SecondarySlider = React.Component:extend("SecondarySlider")
	SecondarySlider.defaultProps = {
		style = DEFAULTS.SECONDARY.STYLE,
		onChange = DEFAULTS.SECONDARY.ON_CHANGE,
		initialValue = DEFAULTS.SECONDARY.INITIAL_VALUE,
		minimum = DEFAULTS.SECONDARY.MINIMUM,
		maximum = DEFAULTS.SECONDARY.MAXIMUM,
		increment = DEFAULTS.SECONDARY.INCREMENT,
		leftTextOrIcon = DEFAULTS.SECONDARY.LEFT_TEXT_OR_ICON,
		rightTextOrIcon = DEFAULTS.SECONDARY.RIGHT_TEXT_OR_ICON,
		elevation = DEFAULTS.SECONDARY.ELEVATION,
	}
	function SecondarySlider:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			style = _Value(self.defaultProps.style),
			onChange = _Value(self.defaultProps.onChange),
			initialValue = _Value(self.defaultProps.initialValue),
			minimum = _Value(self.defaultProps.minimum),
			maximum = _Value(self.defaultProps.maximum),
			increment = _Value(self.defaultProps.increment),
			leftTextOrIcon = _Value(self.defaultProps.leftTextOrIcon),
			rightTextOrIcon = _Value(self.defaultProps.rightTextOrIcon),
			elevation = _Value(self.defaultProps.elevation),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.secondary(
			self._internalStates.style,
			self._internalStates.onChange,
			self._internalStates.initialValue,
			self._internalStates.minimum,
			self._internalStates.maximum,
			self._internalStates.increment,
			self._internalStates.leftTextOrIcon,
			self._internalStates.rightTextOrIcon,
			self._internalStates.elevation
		)
	end

	function SecondarySlider:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return React.createElement(ReactRoblox.createPortal, props)
	end
	function SecondarySlider:componentDidMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function SecondarySlider:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.Secondary = SecondarySlider
end

do
	local TertiarySlider = React.Component:extend("TertiarySlider")
	TertiarySlider.defaultProps = {
		style = DEFAULTS.TERTIARY.STYLE,
		onChange = DEFAULTS.TERTIARY.ON_CHANGE,
		initialValue = DEFAULTS.TERTIARY.INITIAL_VALUE,
		minimum = DEFAULTS.TERTIARY.MINIMUM,
		maximum = DEFAULTS.TERTIARY.MAXIMUM,
		increment = DEFAULTS.TERTIARY.INCREMENT,
		leftTextOrIcon = DEFAULTS.TERTIARY.LEFT_TEXT_OR_ICON,
		rightTextOrIcon = DEFAULTS.TERTIARY.RIGHT_TEXT_OR_ICON,
		elevation = DEFAULTS.TERTIARY.ELEVATION,
	}
	function TertiarySlider:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			style = _Value(self.defaultProps.style),
			onChange = _Value(self.defaultProps.onChange),
			initialValue = _Value(self.defaultProps.initialValue),
			minimum = _Value(self.defaultProps.minimum),
			maximum = _Value(self.defaultProps.maximum),
			increment = _Value(self.defaultProps.increment),
			leftTextOrIcon = _Value(self.defaultProps.leftTextOrIcon),
			rightTextOrIcon = _Value(self.defaultProps.rightTextOrIcon),
			elevation = _Value(self.defaultProps.elevation),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.tertiary(
			self._internalStates.style,
			self._internalStates.onChange,
			self._internalStates.initialValue,
			self._internalStates.minimum,
			self._internalStates.maximum,
			self._internalStates.increment,
			self._internalStates.leftTextOrIcon,
			self._internalStates.rightTextOrIcon,
			self._internalStates.elevation
		)
	end

	function TertiarySlider:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return React.createElement(ReactRoblox.createPortal, props)
	end
	function TertiarySlider:componentDidMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function TertiarySlider:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.Tertiary = TertiarySlider
end

do
	local OnPrimarySlider = React.Component:extend("OnPrimarySlider")
	OnPrimarySlider.defaultProps = {
		style = DEFAULTS.ON_PRIMARY.STYLE,
		onChange = DEFAULTS.ON_PRIMARY.ON_CHANGE,
		initialValue = DEFAULTS.ON_PRIMARY.INITIAL_VALUE,
		minimum = DEFAULTS.ON_PRIMARY.MINIMUM,
		maximum = DEFAULTS.ON_PRIMARY.MAXIMUM,
		increment = DEFAULTS.ON_PRIMARY.INCREMENT,
		leftTextOrIcon = DEFAULTS.ON_PRIMARY.LEFT_TEXT_OR_ICON,
		rightTextOrIcon = DEFAULTS.ON_PRIMARY.RIGHT_TEXT_OR_ICON,
		elevation = DEFAULTS.ON_PRIMARY.ELEVATION,
	}
	function OnPrimarySlider:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			style = _Value(self.defaultProps.style),
			onChange = _Value(self.defaultProps.onChange),
			initialValue = _Value(self.defaultProps.initialValue),
			minimum = _Value(self.defaultProps.minimum),
			maximum = _Value(self.defaultProps.maximum),
			increment = _Value(self.defaultProps.increment),
			leftTextOrIcon = _Value(self.defaultProps.leftTextOrIcon),
			rightTextOrIcon = _Value(self.defaultProps.rightTextOrIcon),
			elevation = _Value(self.defaultProps.elevation),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.onPrimary(
			self._internalStates.style,
			self._internalStates.onChange,
			self._internalStates.initialValue,
			self._internalStates.minimum,
			self._internalStates.maximum,
			self._internalStates.increment,
			self._internalStates.leftTextOrIcon,
			self._internalStates.rightTextOrIcon,
			self._internalStates.elevation
		)
	end

	function OnPrimarySlider:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return React.createElement(ReactRoblox.createPortal, props)
	end
	function OnPrimarySlider:componentDidMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function OnPrimarySlider:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.OnPrimary = OnPrimarySlider
end

do
	local OnSecondarySlider = React.Component:extend("OnSecondarySlider")
	OnSecondarySlider.defaultProps = {
		style = DEFAULTS.ON_SECONDARY.STYLE,
		onChange = DEFAULTS.ON_SECONDARY.ON_CHANGE,
		initialValue = DEFAULTS.ON_SECONDARY.INITIAL_VALUE,
		minimum = DEFAULTS.ON_SECONDARY.MINIMUM,
		maximum = DEFAULTS.ON_SECONDARY.MAXIMUM,
		increment = DEFAULTS.ON_SECONDARY.INCREMENT,
		leftTextOrIcon = DEFAULTS.ON_SECONDARY.LEFT_TEXT_OR_ICON,
		rightTextOrIcon = DEFAULTS.ON_SECONDARY.RIGHT_TEXT_OR_ICON,
		elevation = DEFAULTS.ON_SECONDARY.ELEVATION,
	}
	function OnSecondarySlider:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			style = _Value(self.defaultProps.style),
			onChange = _Value(self.defaultProps.onChange),
			initialValue = _Value(self.defaultProps.initialValue),
			minimum = _Value(self.defaultProps.minimum),
			maximum = _Value(self.defaultProps.maximum),
			increment = _Value(self.defaultProps.increment),
			leftTextOrIcon = _Value(self.defaultProps.leftTextOrIcon),
			rightTextOrIcon = _Value(self.defaultProps.rightTextOrIcon),
			elevation = _Value(self.defaultProps.elevation),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.onSecondary(
			self._internalStates.style,
			self._internalStates.onChange,
			self._internalStates.initialValue,
			self._internalStates.minimum,
			self._internalStates.maximum,
			self._internalStates.increment,
			self._internalStates.leftTextOrIcon,
			self._internalStates.rightTextOrIcon,
			self._internalStates.elevation
		)
	end

	function OnSecondarySlider:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return React.createElement(ReactRoblox.createPortal, props)
	end
	function OnSecondarySlider:componentDidMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function OnSecondarySlider:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.OnSecondary = OnSecondarySlider
end

do
	local OnTertiarySlider = React.Component:extend("OnTertiarySlider")
	OnTertiarySlider.defaultProps = {
		style = DEFAULTS.ON_TERTIARY.STYLE,
		onChange = DEFAULTS.ON_TERTIARY.ON_CHANGE,
		initialValue = DEFAULTS.ON_TERTIARY.INITIAL_VALUE,
		minimum = DEFAULTS.ON_TERTIARY.MINIMUM,
		maximum = DEFAULTS.ON_TERTIARY.MAXIMUM,
		increment = DEFAULTS.ON_TERTIARY.INCREMENT,
		leftTextOrIcon = DEFAULTS.ON_TERTIARY.LEFT_TEXT_OR_ICON,
		rightTextOrIcon = DEFAULTS.ON_TERTIARY.RIGHT_TEXT_OR_ICON,
		elevation = DEFAULTS.ON_TERTIARY.ELEVATION,
	}
	function OnTertiarySlider:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			style = _Value(self.defaultProps.style),
			onChange = _Value(self.defaultProps.onChange),
			initialValue = _Value(self.defaultProps.initialValue),
			minimum = _Value(self.defaultProps.minimum),
			maximum = _Value(self.defaultProps.maximum),
			increment = _Value(self.defaultProps.increment),
			leftTextOrIcon = _Value(self.defaultProps.leftTextOrIcon),
			rightTextOrIcon = _Value(self.defaultProps.rightTextOrIcon),
			elevation = _Value(self.defaultProps.elevation),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.onTertiary(
			self._internalStates.style,
			self._internalStates.onChange,
			self._internalStates.initialValue,
			self._internalStates.minimum,
			self._internalStates.maximum,
			self._internalStates.increment,
			self._internalStates.leftTextOrIcon,
			self._internalStates.rightTextOrIcon,
			self._internalStates.elevation
		)
	end

	function OnTertiarySlider:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return React.createElement(ReactRoblox.createPortal, props)
	end
	function OnTertiarySlider:componentDidMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function OnTertiarySlider:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.OnTertiary = OnTertiarySlider
end

return Interface
