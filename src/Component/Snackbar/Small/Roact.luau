--!strict
-- this script was generated by the build system, please do not make manual edits
local _Package = script.Parent.Parent.Parent.Parent
local _Packages = _Package.Parent
-- Services
-- Packages
local Maid = require(_Packages:WaitForChild("Maid"))
local ColdFusion = require(_Packages:WaitForChild("ColdFusion"))
local Roact = require(_Packages:WaitForChild("Roact"))

-- Modules
local Types = require(_Package:WaitForChild("Types"))
local Style = require(_Package:WaitForChild("Style"))

local Source = require(script.Parent:WaitForChild("ColdFusion"))

-- Types
type Maid = Maid.Maid
type Style = Style.Style
type FontData = Types.FontData
type OptionData = Types.OptionData
type ButtonData = Types.ButtonData
type ImageData = Types.ImageData
type CanBeState<V> = ColdFusion.CanBeState<V>
-- Constants
local DEFAULTS = require(script.Parent:WaitForChild("Defaults"))
-- Variables
-- References
-- Private Functions
-- Class
local Interface = {}

do
	local NewSnackbarSmall = Roact.Component:extend("component_name")
	NewSnackbarSmall.defaultProps = {
		text = DEFAULTS.NEW.TEXT,
		buttonText = DEFAULTS.NEW.BUTTON_TEXT,
		onButtonClick = DEFAULTS.NEW.ON_BUTTON_CLICK,
		onCloseClick = DEFAULTS.NEW.ON_CLOSE_CLICK,
		textColor = DEFAULTS.NEW.TEXT_COLOR,
		buttonTextColor = DEFAULTS.NEW.BUTTON_TEXT_COLOR,
		backgroundColor = DEFAULTS.NEW.BACKGROUND_COLOR,
		elevation = DEFAULTS.NEW.ELEVATION,
		schemeType = DEFAULTS.NEW.SCHEME_TYPE,
		fontData = DEFAULTS.NEW.FONT_DATA,
		scale = DEFAULTS.NEW.SCALE,
	}
	function NewSnackbarSmall:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			text = _Value(self.defaultProps.text),
			buttonText = _Value(self.defaultProps.buttonText),
			onButtonClick = _Value(self.defaultProps.onButtonClick),
			onCloseClick = _Value(self.defaultProps.onCloseClick),
			textColor = _Value(self.defaultProps.textColor),
			buttonTextColor = _Value(self.defaultProps.buttonTextColor),
			backgroundColor = _Value(self.defaultProps.backgroundColor),
			elevation = _Value(self.defaultProps.elevation),
			schemeType = _Value(self.defaultProps.schemeType),
			fontData = _Value(self.defaultProps.fontData),
			scale = _Value(self.defaultProps.scale),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.new(
			self._internalStates.text,
			self._internalStates.buttonText,
			self._internalStates.onButtonClick,
			self._internalStates.onCloseClick,
			self._internalStates.textColor,
			self._internalStates.buttonTextColor,
			self._internalStates.backgroundColor,
			self._internalStates.elevation,
			self._internalStates.schemeType,
			self._internalStates.fontData,
			self._internalStates.scale
		)
	end

	function NewSnackbarSmall:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return Roact.createElement(Roact.Portal, props)
	end
	function NewSnackbarSmall:didMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function NewSnackbarSmall:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.New = NewSnackbarSmall
end

do
	local SurfaceContainerSnackbarSmall = Roact.Component:extend("component_name")
	SurfaceContainerSnackbarSmall.defaultProps = {
		style = DEFAULTS.SURFACE_CONTAINER.STYLE,
		text = DEFAULTS.SURFACE_CONTAINER.TEXT,
		buttonText = DEFAULTS.SURFACE_CONTAINER.BUTTON_TEXT,
		onButtonClick = DEFAULTS.SURFACE_CONTAINER.ON_BUTTON_CLICK,
		onCloseClick = DEFAULTS.SURFACE_CONTAINER.ON_CLOSE_CLICK,
		elevation = DEFAULTS.SURFACE_CONTAINER.ELEVATION,
	}
	function SurfaceContainerSnackbarSmall:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			style = _Value(self.defaultProps.style),
			text = _Value(self.defaultProps.text),
			buttonText = _Value(self.defaultProps.buttonText),
			onButtonClick = _Value(self.defaultProps.onButtonClick),
			onCloseClick = _Value(self.defaultProps.onCloseClick),
			elevation = _Value(self.defaultProps.elevation),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.surfaceContainer(
			self._internalStates.style,
			self._internalStates.text,
			self._internalStates.buttonText,
			self._internalStates.onButtonClick,
			self._internalStates.onCloseClick,
			self._internalStates.elevation
		)
	end

	function SurfaceContainerSnackbarSmall:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return Roact.createElement(Roact.Portal, props)
	end
	function SurfaceContainerSnackbarSmall:didMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function SurfaceContainerSnackbarSmall:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.SurfaceContainer = SurfaceContainerSnackbarSmall
end

do
	local PrimaryContainerSnackbarSmall = Roact.Component:extend("component_name")
	PrimaryContainerSnackbarSmall.defaultProps = {
		style = DEFAULTS.PRIMARY_CONTAINER.STYLE,
		text = DEFAULTS.PRIMARY_CONTAINER.TEXT,
		buttonText = DEFAULTS.PRIMARY_CONTAINER.BUTTON_TEXT,
		onButtonClick = DEFAULTS.PRIMARY_CONTAINER.ON_BUTTON_CLICK,
		onCloseClick = DEFAULTS.PRIMARY_CONTAINER.ON_CLOSE_CLICK,
		elevation = DEFAULTS.PRIMARY_CONTAINER.ELEVATION,
	}
	function PrimaryContainerSnackbarSmall:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			style = _Value(self.defaultProps.style),
			text = _Value(self.defaultProps.text),
			buttonText = _Value(self.defaultProps.buttonText),
			onButtonClick = _Value(self.defaultProps.onButtonClick),
			onCloseClick = _Value(self.defaultProps.onCloseClick),
			elevation = _Value(self.defaultProps.elevation),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.primaryContainer(
			self._internalStates.style,
			self._internalStates.text,
			self._internalStates.buttonText,
			self._internalStates.onButtonClick,
			self._internalStates.onCloseClick,
			self._internalStates.elevation
		)
	end

	function PrimaryContainerSnackbarSmall:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return Roact.createElement(Roact.Portal, props)
	end
	function PrimaryContainerSnackbarSmall:didMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function PrimaryContainerSnackbarSmall:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.PrimaryContainer = PrimaryContainerSnackbarSmall
end

do
	local SecondaryContainerSnackbarSmall = Roact.Component:extend("component_name")
	SecondaryContainerSnackbarSmall.defaultProps = {
		style = DEFAULTS.SECONDARY_CONTAINER.STYLE,
		text = DEFAULTS.SECONDARY_CONTAINER.TEXT,
		buttonText = DEFAULTS.SECONDARY_CONTAINER.BUTTON_TEXT,
		onButtonClick = DEFAULTS.SECONDARY_CONTAINER.ON_BUTTON_CLICK,
		onCloseClick = DEFAULTS.SECONDARY_CONTAINER.ON_CLOSE_CLICK,
		elevation = DEFAULTS.SECONDARY_CONTAINER.ELEVATION,
	}
	function SecondaryContainerSnackbarSmall:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			style = _Value(self.defaultProps.style),
			text = _Value(self.defaultProps.text),
			buttonText = _Value(self.defaultProps.buttonText),
			onButtonClick = _Value(self.defaultProps.onButtonClick),
			onCloseClick = _Value(self.defaultProps.onCloseClick),
			elevation = _Value(self.defaultProps.elevation),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.secondaryContainer(
			self._internalStates.style,
			self._internalStates.text,
			self._internalStates.buttonText,
			self._internalStates.onButtonClick,
			self._internalStates.onCloseClick,
			self._internalStates.elevation
		)
	end

	function SecondaryContainerSnackbarSmall:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return Roact.createElement(Roact.Portal, props)
	end
	function SecondaryContainerSnackbarSmall:didMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function SecondaryContainerSnackbarSmall:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.SecondaryContainer = SecondaryContainerSnackbarSmall
end

do
	local TertiaryContainerSnackbarSmall = Roact.Component:extend("component_name")
	TertiaryContainerSnackbarSmall.defaultProps = {
		style = DEFAULTS.TERTIARY_CONTAINER.STYLE,
		text = DEFAULTS.TERTIARY_CONTAINER.TEXT,
		buttonText = DEFAULTS.TERTIARY_CONTAINER.BUTTON_TEXT,
		onButtonClick = DEFAULTS.TERTIARY_CONTAINER.ON_BUTTON_CLICK,
		onCloseClick = DEFAULTS.TERTIARY_CONTAINER.ON_CLOSE_CLICK,
		elevation = DEFAULTS.TERTIARY_CONTAINER.ELEVATION,
	}
	function TertiaryContainerSnackbarSmall:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			style = _Value(self.defaultProps.style),
			text = _Value(self.defaultProps.text),
			buttonText = _Value(self.defaultProps.buttonText),
			onButtonClick = _Value(self.defaultProps.onButtonClick),
			onCloseClick = _Value(self.defaultProps.onCloseClick),
			elevation = _Value(self.defaultProps.elevation),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.tertiaryContainer(
			self._internalStates.style,
			self._internalStates.text,
			self._internalStates.buttonText,
			self._internalStates.onButtonClick,
			self._internalStates.onCloseClick,
			self._internalStates.elevation
		)
	end

	function TertiaryContainerSnackbarSmall:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return Roact.createElement(Roact.Portal, props)
	end
	function TertiaryContainerSnackbarSmall:didMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function TertiaryContainerSnackbarSmall:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.TertiaryContainer = TertiaryContainerSnackbarSmall
end

return Interface
