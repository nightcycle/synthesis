--!strict
-- this script was generated by the build system, please do not make manual edits
local _Package = script.Parent.Parent.Parent.Parent.Parent
local _Packages = _Package.Parent
-- Services
-- Packages
local Maid = require(_Packages:WaitForChild("Maid"))
local ColdFusion = require(_Packages:WaitForChild("ColdFusion"))
local Roact = require(_Packages:WaitForChild("Roact"))

-- Modules
local Types = require(_Package:WaitForChild("Types"))
local Style = require(_Package:WaitForChild("Style"))

local Source = require(script.Parent:WaitForChild("ColdFusion"))

-- Types
type Maid = Maid.Maid
type Style = Style.Style
type FontData = Types.FontData
type OptionData = Types.OptionData
type ButtonData = Types.ButtonData
type ImageData = Types.ImageData
type CanBeState<V> = ColdFusion.CanBeState<V>
-- Constants
local DEFAULTS = require(script.Parent:WaitForChild("Defaults"))
-- Variables
-- References
-- Private Functions
-- Class
local Interface = {}

do
	local NewMenuRowSegmented = Roact.Component:extend("NewMenuRowSegmented")
	NewMenuRowSegmented.defaultProps = {
		options = DEFAULTS.NEW.OPTIONS,
		density = DEFAULTS.NEW.DENSITY,
		isMultiSelect = DEFAULTS.NEW.IS_MULTI_SELECT,
		textColor = DEFAULTS.NEW.TEXT_COLOR,
		fillTextColor = DEFAULTS.NEW.FILL_TEXT_COLOR,
		fillBackgroundColor = DEFAULTS.NEW.FILL_BACKGROUND_COLOR,
		outlineColor = DEFAULTS.NEW.OUTLINE_COLOR,
		elevation = DEFAULTS.NEW.ELEVATION,
		schemeType = DEFAULTS.NEW.SCHEME_TYPE,
		fontData = DEFAULTS.NEW.FONT_DATA,
		scale = DEFAULTS.NEW.SCALE,
	}
	function NewMenuRowSegmented:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			options = _Value(self.defaultProps.options),
			density = _Value(self.defaultProps.density),
			isMultiSelect = _Value(self.defaultProps.isMultiSelect),
			textColor = _Value(self.defaultProps.textColor),
			fillTextColor = _Value(self.defaultProps.fillTextColor),
			fillBackgroundColor = _Value(self.defaultProps.fillBackgroundColor),
			outlineColor = _Value(self.defaultProps.outlineColor),
			elevation = _Value(self.defaultProps.elevation),
			schemeType = _Value(self.defaultProps.schemeType),
			fontData = _Value(self.defaultProps.fontData),
			scale = _Value(self.defaultProps.scale),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.new(
			self._internalStates.options,
			self._internalStates.density,
			self._internalStates.isMultiSelect,
			self._internalStates.textColor,
			self._internalStates.fillTextColor,
			self._internalStates.fillBackgroundColor,
			self._internalStates.outlineColor,
			self._internalStates.elevation,
			self._internalStates.schemeType,
			self._internalStates.fontData,
			self._internalStates.scale
		)
	end

	function NewMenuRowSegmented:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return Roact.createElement(Roact.Portal, props)
	end
	function NewMenuRowSegmented:didMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function NewMenuRowSegmented:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.New = NewMenuRowSegmented
end

do
	local PrimaryContainerMenuRowSegmented = Roact.Component:extend("PrimaryContainerMenuRowSegmented")
	PrimaryContainerMenuRowSegmented.defaultProps = {
		style = DEFAULTS.PRIMARY_CONTAINER.STYLE,
		options = DEFAULTS.PRIMARY_CONTAINER.OPTIONS,
		density = DEFAULTS.PRIMARY_CONTAINER.DENSITY,
		isMultiSelect = DEFAULTS.PRIMARY_CONTAINER.IS_MULTI_SELECT,
		elevation = DEFAULTS.PRIMARY_CONTAINER.ELEVATION,
	}
	function PrimaryContainerMenuRowSegmented:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			style = _Value(self.defaultProps.style),
			options = _Value(self.defaultProps.options),
			density = _Value(self.defaultProps.density),
			isMultiSelect = _Value(self.defaultProps.isMultiSelect),
			elevation = _Value(self.defaultProps.elevation),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.primaryContainer(
			self._internalStates.style,
			self._internalStates.options,
			self._internalStates.density,
			self._internalStates.isMultiSelect,
			self._internalStates.elevation
		)
	end

	function PrimaryContainerMenuRowSegmented:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return Roact.createElement(Roact.Portal, props)
	end
	function PrimaryContainerMenuRowSegmented:didMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function PrimaryContainerMenuRowSegmented:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.PrimaryContainer = PrimaryContainerMenuRowSegmented
end

do
	local SecondaryContainerMenuRowSegmented = Roact.Component:extend("SecondaryContainerMenuRowSegmented")
	SecondaryContainerMenuRowSegmented.defaultProps = {
		style = DEFAULTS.SECONDARY_CONTAINER.STYLE,
		options = DEFAULTS.SECONDARY_CONTAINER.OPTIONS,
		density = DEFAULTS.SECONDARY_CONTAINER.DENSITY,
		isMultiSelect = DEFAULTS.SECONDARY_CONTAINER.IS_MULTI_SELECT,
		elevation = DEFAULTS.SECONDARY_CONTAINER.ELEVATION,
	}
	function SecondaryContainerMenuRowSegmented:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			style = _Value(self.defaultProps.style),
			options = _Value(self.defaultProps.options),
			density = _Value(self.defaultProps.density),
			isMultiSelect = _Value(self.defaultProps.isMultiSelect),
			elevation = _Value(self.defaultProps.elevation),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.secondaryContainer(
			self._internalStates.style,
			self._internalStates.options,
			self._internalStates.density,
			self._internalStates.isMultiSelect,
			self._internalStates.elevation
		)
	end

	function SecondaryContainerMenuRowSegmented:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return Roact.createElement(Roact.Portal, props)
	end
	function SecondaryContainerMenuRowSegmented:didMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function SecondaryContainerMenuRowSegmented:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.SecondaryContainer = SecondaryContainerMenuRowSegmented
end

do
	local TertiaryContainerMenuRowSegmented = Roact.Component:extend("TertiaryContainerMenuRowSegmented")
	TertiaryContainerMenuRowSegmented.defaultProps = {
		style = DEFAULTS.TERTIARY_CONTAINER.STYLE,
		options = DEFAULTS.TERTIARY_CONTAINER.OPTIONS,
		density = DEFAULTS.TERTIARY_CONTAINER.DENSITY,
		isMultiSelect = DEFAULTS.TERTIARY_CONTAINER.IS_MULTI_SELECT,
		elevation = DEFAULTS.TERTIARY_CONTAINER.ELEVATION,
	}
	function TertiaryContainerMenuRowSegmented:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			style = _Value(self.defaultProps.style),
			options = _Value(self.defaultProps.options),
			density = _Value(self.defaultProps.density),
			isMultiSelect = _Value(self.defaultProps.isMultiSelect),
			elevation = _Value(self.defaultProps.elevation),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.tertiaryContainer(
			self._internalStates.style,
			self._internalStates.options,
			self._internalStates.density,
			self._internalStates.isMultiSelect,
			self._internalStates.elevation
		)
	end

	function TertiaryContainerMenuRowSegmented:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return Roact.createElement(Roact.Portal, props)
	end
	function TertiaryContainerMenuRowSegmented:didMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function TertiaryContainerMenuRowSegmented:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.TertiaryContainer = TertiaryContainerMenuRowSegmented
end

return Interface
