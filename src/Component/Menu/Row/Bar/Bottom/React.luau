--!strict
-- this script was generated by the build system, please do not make manual edits
local _Package = script.Parent.Parent.Parent.Parent.Parent.Parent
local _Packages = _Package.Parent
-- Services
-- Packages
local Maid = require(_Packages:WaitForChild("Maid"))
local ColdFusion = require(_Packages:WaitForChild("ColdFusion"))

local React = require(_Packages:WaitForChild("React"))
local ReactRoblox = require(_Packages:WaitForChild("ReactRoblox"))

-- Modules
local Types = require(_Package:WaitForChild("Types"))
local Style = require(_Package:WaitForChild("Style"))

local Source = require(script.Parent:WaitForChild("ColdFusion"))

-- Types
type Maid = Maid.Maid
type Style = Style.Style
type FontData = Types.FontData
type OptionData = Types.OptionData
type ButtonData = Types.ButtonData
type ImageData = Types.ImageData
type CanBeState<V> = ColdFusion.CanBeState<V>
-- Constants
local DEFAULTS = require(script.Parent:WaitForChild("Defaults"))
-- Variables
-- References
-- Private Functions
-- Class
local Interface = {}

do
	local NewMenuRowBarBottom = React.Component:extend("NewMenuRowBarBottom")
	NewMenuRowBarBottom.defaultProps = {
		buttons = DEFAULTS.NEW.BUTTONS,
		fab = DEFAULTS.NEW.FAB,
		backgroundColor = DEFAULTS.NEW.BACKGROUND_COLOR,
		iconColor = DEFAULTS.NEW.ICON_COLOR,
		fabColor = DEFAULTS.NEW.FAB_COLOR,
		fabIconColor = DEFAULTS.NEW.FAB_ICON_COLOR,
		fabShadowColor = DEFAULTS.NEW.FAB_SHADOW_COLOR,
		elevation = DEFAULTS.NEW.ELEVATION,
		schemeType = DEFAULTS.NEW.SCHEME_TYPE,
		fontData = DEFAULTS.NEW.FONT_DATA,
		scale = DEFAULTS.NEW.SCALE,
	}
	function NewMenuRowBarBottom:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			buttons = _Value(self.defaultProps.buttons),
			fab = _Value(self.defaultProps.fab),
			backgroundColor = _Value(self.defaultProps.backgroundColor),
			iconColor = _Value(self.defaultProps.iconColor),
			fabColor = _Value(self.defaultProps.fabColor),
			fabIconColor = _Value(self.defaultProps.fabIconColor),
			fabShadowColor = _Value(self.defaultProps.fabShadowColor),
			elevation = _Value(self.defaultProps.elevation),
			schemeType = _Value(self.defaultProps.schemeType),
			fontData = _Value(self.defaultProps.fontData),
			scale = _Value(self.defaultProps.scale),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.new(
			self._internalStates.buttons,
			self._internalStates.fab,
			self._internalStates.backgroundColor,
			self._internalStates.iconColor,
			self._internalStates.fabColor,
			self._internalStates.fabIconColor,
			self._internalStates.fabShadowColor,
			self._internalStates.elevation,
			self._internalStates.schemeType,
			self._internalStates.fontData,
			self._internalStates.scale
		)
	end

	function NewMenuRowBarBottom:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return React.createElement(ReactRoblox.createPortal, props)
	end
	function NewMenuRowBarBottom:componentDidMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function NewMenuRowBarBottom:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.New = NewMenuRowBarBottom
end

do
	local PrimaryMenuRowBarBottom = React.Component:extend("PrimaryMenuRowBarBottom")
	PrimaryMenuRowBarBottom.defaultProps = {
		style = DEFAULTS.PRIMARY.STYLE,
		buttons = DEFAULTS.PRIMARY.BUTTONS,
		fab = DEFAULTS.PRIMARY.FAB,
		elevation = DEFAULTS.PRIMARY.ELEVATION,
	}
	function PrimaryMenuRowBarBottom:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			style = _Value(self.defaultProps.style),
			buttons = _Value(self.defaultProps.buttons),
			fab = _Value(self.defaultProps.fab),
			elevation = _Value(self.defaultProps.elevation),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.primary(
			self._internalStates.style,
			self._internalStates.buttons,
			self._internalStates.fab,
			self._internalStates.elevation
		)
	end

	function PrimaryMenuRowBarBottom:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return React.createElement(ReactRoblox.createPortal, props)
	end
	function PrimaryMenuRowBarBottom:componentDidMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function PrimaryMenuRowBarBottom:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.Primary = PrimaryMenuRowBarBottom
end

do
	local SecondaryMenuRowBarBottom = React.Component:extend("SecondaryMenuRowBarBottom")
	SecondaryMenuRowBarBottom.defaultProps = {
		style = DEFAULTS.SECONDARY.STYLE,
		buttons = DEFAULTS.SECONDARY.BUTTONS,
		fab = DEFAULTS.SECONDARY.FAB,
		elevation = DEFAULTS.SECONDARY.ELEVATION,
	}
	function SecondaryMenuRowBarBottom:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			style = _Value(self.defaultProps.style),
			buttons = _Value(self.defaultProps.buttons),
			fab = _Value(self.defaultProps.fab),
			elevation = _Value(self.defaultProps.elevation),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.secondary(
			self._internalStates.style,
			self._internalStates.buttons,
			self._internalStates.fab,
			self._internalStates.elevation
		)
	end

	function SecondaryMenuRowBarBottom:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return React.createElement(ReactRoblox.createPortal, props)
	end
	function SecondaryMenuRowBarBottom:componentDidMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function SecondaryMenuRowBarBottom:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.Secondary = SecondaryMenuRowBarBottom
end

do
	local TertiaryMenuRowBarBottom = React.Component:extend("TertiaryMenuRowBarBottom")
	TertiaryMenuRowBarBottom.defaultProps = {
		style = DEFAULTS.TERTIARY.STYLE,
		buttons = DEFAULTS.TERTIARY.BUTTONS,
		fab = DEFAULTS.TERTIARY.FAB,
		elevation = DEFAULTS.TERTIARY.ELEVATION,
	}
	function TertiaryMenuRowBarBottom:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			style = _Value(self.defaultProps.style),
			buttons = _Value(self.defaultProps.buttons),
			fab = _Value(self.defaultProps.fab),
			elevation = _Value(self.defaultProps.elevation),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.tertiary(
			self._internalStates.style,
			self._internalStates.buttons,
			self._internalStates.fab,
			self._internalStates.elevation
		)
	end

	function TertiaryMenuRowBarBottom:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return React.createElement(ReactRoblox.createPortal, props)
	end
	function TertiaryMenuRowBarBottom:componentDidMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function TertiaryMenuRowBarBottom:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.Tertiary = TertiaryMenuRowBarBottom
end

return Interface
