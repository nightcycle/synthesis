--!strict
-- this script was generated by the build system, please do not make manual edits
local _Package = script.Parent.Parent.Parent.Parent.Parent.Parent.Parent
local _Packages = _Package.Parent
-- Services
-- Packages
local Maid = require(_Packages:WaitForChild("Maid"))
local ColdFusion = require(_Packages:WaitForChild("ColdFusion"))

-- Modules
local Types = require(_Package:WaitForChild("Types"))
local Style = require(_Package:WaitForChild("Style"))
local Enums = require(_Package:WaitForChild("Enums"))
local Translators = require(_Package:WaitForChild("Translators"))

local Source = require(script.Parent:WaitForChild("ColdFusion"))

-- Types
type Maid = Maid.Maid
type Style = Style.Style
type FontData = Types.FontData
type OptionData = Types.OptionData
type ButtonData = Types.ButtonData
type ImageData = Types.ImageData
type CanBeState<V> = ColdFusion.CanBeState<V>
type Wrapper<BaseInstance, Definition, ClassName> = Translators.Wrapper<BaseInstance, Definition, ClassName>

export type SmallWrapperDefinition = {
	Title: string,
	Buttons: { ButtonData },
	Navigation: ButtonData?,
	BackgroundColor: Color3,
	TextColor: Color3,
	Elevation: number,
	SchemeType: Enums.SchemeType,
	TitleFontData: FontData,
	SubHeadingFontData: FontData,
	ButtonFontData: FontData,
	Scale: number,
}
export type SmallWrapper = Wrapper<GuiObject, SmallWrapperDefinition, "Small">

export type StyledSmallWrapperDefinition = {
	Style: Style,
	Title: string,
	Buttons: { ButtonData },
	Navigation: ButtonData?,
	Elevation: number?,
}
export type StyledSmallWrapper = Wrapper<GuiObject, StyledSmallWrapperDefinition, "StyledSmall">
-- Constants
-- Variables
-- References
-- Private Functions
-- Interface
local Interface = {}

function Interface.primary(): StyledSmallWrapper
	local maid = Maid.new()
	local _fuse = ColdFusion.fuse(maid)
	local _Value = _fuse.Value
	local definition = {
		Style = _Value(Style.new(1, Enum.Font.SourceSans, "Light", Color3.new(0, 0.4, 0.7))),
		Title = _Value("Title"),
		Buttons = _Value({}),
		Navigation = _Value(nil),
		Elevation = _Value(0),
	}
	local inst: GuiObject = Source.primary(
		definition.Style,
		definition.Title,
		definition.Buttons,
		definition.Navigation,
		definition.Elevation
	)
	maid:GiveTask(inst.Destroying:Connect(function()
		maid:Destroy()
	end))
	local wrapper, cleanUp = Translators.ColdFusion.toWrapper("StyledSmall", inst, definition)
	maid:GiveTask(cleanUp)
	return wrapper
end

function Interface.secondary(): StyledSmallWrapper
	local maid = Maid.new()
	local _fuse = ColdFusion.fuse(maid)
	local _Value = _fuse.Value
	local definition = {
		Style = _Value(Style.new(1, Enum.Font.SourceSans, "Light", Color3.new(0, 0.4, 0.7))),
		Title = _Value("Title"),
		Buttons = _Value({}),
		Navigation = _Value(nil),
		Elevation = _Value(0),
	}
	local inst: GuiObject = Source.secondary(
		definition.Style,
		definition.Title,
		definition.Buttons,
		definition.Navigation,
		definition.Elevation
	)
	maid:GiveTask(inst.Destroying:Connect(function()
		maid:Destroy()
	end))
	local wrapper, cleanUp = Translators.ColdFusion.toWrapper("StyledSmall", inst, definition)
	maid:GiveTask(cleanUp)
	return wrapper
end

function Interface.tertiary(): StyledSmallWrapper
	local maid = Maid.new()
	local _fuse = ColdFusion.fuse(maid)
	local _Value = _fuse.Value
	local definition = {
		Style = _Value(Style.new(1, Enum.Font.SourceSans, "Light", Color3.new(0, 0.4, 0.7))),
		Title = _Value("Title"),
		Buttons = _Value({}),
		Navigation = _Value(nil),
		Elevation = _Value(0),
	}
	local inst: GuiObject = Source.tertiary(
		definition.Style,
		definition.Title,
		definition.Buttons,
		definition.Navigation,
		definition.Elevation
	)
	maid:GiveTask(inst.Destroying:Connect(function()
		maid:Destroy()
	end))
	local wrapper, cleanUp = Translators.ColdFusion.toWrapper("StyledSmall", inst, definition)
	maid:GiveTask(cleanUp)
	return wrapper
end

return Interface
