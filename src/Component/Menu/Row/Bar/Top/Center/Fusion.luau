--!strict
-- this script was generated by the build system, please do not make manual edits
local _Package = script.Parent.Parent.Parent.Parent.Parent.Parent.Parent
local _Packages = _Package.Parent
-- Services
-- Packages
local Maid = require(_Packages:WaitForChild("Maid"))
local ColdFusion = require(_Packages:WaitForChild("ColdFusion"))

-- Modules
local Types = require(_Package:WaitForChild("Types"))
local Style = require(_Package:WaitForChild("Style"))
local Enums = require(_Package:WaitForChild("Enums"))
local Translators = require(_Package:WaitForChild("Translators"))

local Source = require(script.Parent:WaitForChild("ColdFusion"))

-- Types
type Maid = Maid.Maid
type Style = Style.Style
type FontData = Types.FontData
type OptionData = Types.OptionData
type ButtonData = Types.ButtonData
type ImageData = Types.ImageData
type CanBeState<V> = ColdFusion.CanBeState<V>
type FusionCanBeState<V> = Translators.FusionCanBeState<V>

-- Constants
-- Variables
-- References
-- Private Functions
-- Class
local Interface = {}

function Interface.new(
	title: FusionCanBeState<string>,
	buttons: FusionCanBeState<{ ButtonData }>,
	navigation: FusionCanBeState<ButtonData?>,
	backgroundColor: FusionCanBeState<Color3>,
	textColor: FusionCanBeState<Color3>,
	elevation: FusionCanBeState<number?>,
	schemeType: FusionCanBeState<Enums.SchemeType>,
	titleFontData: FusionCanBeState<FontData>,
	subHeadingFontData: FusionCanBeState<FontData>,
	buttonFontData: FusionCanBeState<FontData>,
	scale: FusionCanBeState<number>
): GuiObject
	local maid = Maid.new()
	local _fuse = ColdFusion.fuse(maid)
	local function convert<V>(value: FusionCanBeState<V>): CanBeState<V>
		return Translators.Fusion.toColdFusion(maid, _fuse, value)
	end
	local inst = Source.new(
		convert(title),
		convert(buttons),
		convert(navigation),
		convert(backgroundColor),
		convert(textColor),
		convert(elevation),
		convert(schemeType),
		convert(titleFontData),
		convert(subHeadingFontData),
		convert(buttonFontData),
		convert(scale)
	)
	maid:GiveTask(inst.Destroying:Connect(function()
		maid:Destroy()
	end))
	return inst
end

function Interface.primary(
	style: FusionCanBeState<Style>,
	title: FusionCanBeState<string>,
	buttons: FusionCanBeState<{ ButtonData }>,
	navigation: FusionCanBeState<ButtonData?>,
	elevation: FusionCanBeState<number?>
): GuiObject
	local maid = Maid.new()
	local _fuse = ColdFusion.fuse(maid)
	local function convert<V>(value: FusionCanBeState<V>): CanBeState<V>
		return Translators.Fusion.toColdFusion(maid, _fuse, value)
	end
	local inst = Source.primary(
		convert(style),
		convert(title),
		convert(buttons),
		convert(navigation),
		convert(elevation)
	)
	maid:GiveTask(inst.Destroying:Connect(function()
		maid:Destroy()
	end))
	return inst
end

function Interface.secondary(
	style: FusionCanBeState<Style>,
	title: FusionCanBeState<string>,
	buttons: FusionCanBeState<{ ButtonData }>,
	navigation: FusionCanBeState<ButtonData?>,
	elevation: FusionCanBeState<number?>
): GuiObject
	local maid = Maid.new()
	local _fuse = ColdFusion.fuse(maid)
	local function convert<V>(value: FusionCanBeState<V>): CanBeState<V>
		return Translators.Fusion.toColdFusion(maid, _fuse, value)
	end
	local inst = Source.secondary(
		convert(style),
		convert(title),
		convert(buttons),
		convert(navigation),
		convert(elevation)
	)
	maid:GiveTask(inst.Destroying:Connect(function()
		maid:Destroy()
	end))
	return inst
end

function Interface.tertiary(
	style: FusionCanBeState<Style>,
	title: FusionCanBeState<string>,
	buttons: FusionCanBeState<{ ButtonData }>,
	navigation: FusionCanBeState<ButtonData?>,
	elevation: FusionCanBeState<number?>
): GuiObject
	local maid = Maid.new()
	local _fuse = ColdFusion.fuse(maid)
	local function convert<V>(value: FusionCanBeState<V>): CanBeState<V>
		return Translators.Fusion.toColdFusion(maid, _fuse, value)
	end
	local inst = Source.tertiary(
		convert(style),
		convert(title),
		convert(buttons),
		convert(navigation),
		convert(elevation)
	)
	maid:GiveTask(inst.Destroying:Connect(function()
		maid:Destroy()
	end))
	return inst
end

return Interface
