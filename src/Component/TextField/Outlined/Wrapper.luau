--!strict
-- this script was generated by the build system, please do not make manual edits
local _Package = script.Parent.Parent.Parent.Parent
local _Packages = _Package.Parent
-- Services
-- Packages
local Maid = require(_Packages:WaitForChild("Maid"))
local ColdFusion = require(_Packages:WaitForChild("ColdFusion"))

-- Modules
local Types = require(_Package:WaitForChild("Types"))
local Style = require(_Package:WaitForChild("Style"))
local Enums = require(_Package:WaitForChild("Enums"))
local Translators = require(_Package:WaitForChild("Translators"))

local Source = require(script.Parent:WaitForChild("ColdFusion"))

-- Types
type Maid = Maid.Maid
type Style = Style.Style
type FontData = Types.FontData
type OptionData = Types.OptionData
type ButtonData = Types.ButtonData
type ImageData = Types.ImageData
type CanBeState<V> = ColdFusion.CanBeState<V>
type Wrapper<BaseInstance, Definition, ClassName> = Translators.Wrapper<BaseInstance, Definition, ClassName>

export type OutlinedWrapperDefinition = {
	OnSubmit: (text: string?) -> string?,
	OnInput: (text: string?) -> string?,
	InitialText: string?,
	IsEnabled: boolean,
	IsError: boolean,
	Label: string,
	CharacterLimit: number?,
	SupportingText: string?,
	Icon: ImageData?,
	HightlightColor: Color3,
	ErrorColor: Color3,
	BorderColor: Color3,
	TextColor: Color3,
	LabelColor: Color3,
	Elevation: number,
	SchemeType: Enums.SchemeType,
	BodyFontData: FontData,
	SupportFontData: FontData,
	Scale: number,
}
export type OutlinedWrapper = Wrapper<GuiObject, OutlinedWrapperDefinition, "Outlined">

export type StyledOutlinedWrapperDefinition = {
	Style: Style,
	OnSubmit: (text: string?) -> string?,
	Label: string,
	InitialText: string?,
	OnInput: ((text: string?) -> string?)?,
	SupportingText: string?,
	Icon: ImageData?,
	CharacterLimit: number?,
	IsError: boolean?,
	Elevation: number?,
	IsEnabled: boolean?,
}
export type StyledOutlinedWrapper = Wrapper<GuiObject, StyledOutlinedWrapperDefinition, "StyledOutlined">
-- Constants
-- Variables
-- References
-- Private Functions
-- Interface
local Interface = {}

function Interface.primary(): StyledOutlinedWrapper
	local maid = Maid.new()
	local _fuse = ColdFusion.fuse(maid)
	local _Value = _fuse.Value
	local definition = {
		Style = _Value(Style.new(1, "Arial", "Light", Color3.new(0, 0.4, 0.7))),
		OnSubmit = _Value(function(text: string?)
			return text
		end),
		Label = _Value("Label"),
		InitialText = _Value(nil),
		OnInput = _Value(nil),
		SupportingText = _Value(nil),
		Icon = _Value(nil),
		CharacterLimit = _Value(nil),
		IsError = _Value(nil),
		Elevation = _Value(0),
		IsEnabled = _Value(nil),
	}
	local inst: GuiObject = Source.primary(
		definition.Style,
		definition.OnSubmit,
		definition.Label,
		definition.InitialText,
		definition.OnInput,
		definition.SupportingText,
		definition.Icon,
		definition.CharacterLimit,
		definition.IsError,
		definition.Elevation,
		definition.IsEnabled
	)
	maid:GiveTask(inst.Destroying:Connect(function()
		maid:Destroy()
	end))
	local wrapper, cleanUp = Translators.ColdFusion.toWrapper("StyledOutlined", inst, definition)
	maid:GiveTask(cleanUp)
	return wrapper
end

function Interface.secondary(): StyledOutlinedWrapper
	local maid = Maid.new()
	local _fuse = ColdFusion.fuse(maid)
	local _Value = _fuse.Value
	local definition = {
		Style = _Value(Style.new(1, "Arial", "Light", Color3.new(0, 0.4, 0.7))),
		OnSubmit = _Value(function(text: string?)
			return text
		end),
		Label = _Value("Label"),
		InitialText = _Value(nil),
		OnInput = _Value(nil),
		SupportingText = _Value(nil),
		Icon = _Value(nil),
		CharacterLimit = _Value(nil),
		IsError = _Value(nil),
		Elevation = _Value(0),
		IsEnabled = _Value(nil),
	}
	local inst: GuiObject = Source.secondary(
		definition.Style,
		definition.OnSubmit,
		definition.Label,
		definition.InitialText,
		definition.OnInput,
		definition.SupportingText,
		definition.Icon,
		definition.CharacterLimit,
		definition.IsError,
		definition.Elevation,
		definition.IsEnabled
	)
	maid:GiveTask(inst.Destroying:Connect(function()
		maid:Destroy()
	end))
	local wrapper, cleanUp = Translators.ColdFusion.toWrapper("StyledOutlined", inst, definition)
	maid:GiveTask(cleanUp)
	return wrapper
end

function Interface.tertiary(): StyledOutlinedWrapper
	local maid = Maid.new()
	local _fuse = ColdFusion.fuse(maid)
	local _Value = _fuse.Value
	local definition = {
		Style = _Value(Style.new(1, "Arial", "Light", Color3.new(0, 0.4, 0.7))),
		OnSubmit = _Value(function(text: string?)
			return text
		end),
		Label = _Value("Label"),
		InitialText = _Value(nil),
		OnInput = _Value(nil),
		SupportingText = _Value(nil),
		Icon = _Value(nil),
		CharacterLimit = _Value(nil),
		IsError = _Value(nil),
		Elevation = _Value(0),
		IsEnabled = _Value(nil),
	}
	local inst: GuiObject = Source.tertiary(
		definition.Style,
		definition.OnSubmit,
		definition.Label,
		definition.InitialText,
		definition.OnInput,
		definition.SupportingText,
		definition.Icon,
		definition.CharacterLimit,
		definition.IsError,
		definition.Elevation,
		definition.IsEnabled
	)
	maid:GiveTask(inst.Destroying:Connect(function()
		maid:Destroy()
	end))
	local wrapper, cleanUp = Translators.ColdFusion.toWrapper("StyledOutlined", inst, definition)
	maid:GiveTask(cleanUp)
	return wrapper
end

return Interface
