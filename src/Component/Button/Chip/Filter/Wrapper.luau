--!strict
-- this script was generated by the build system, please do not make manual edits
local _Package = script.Parent.Parent.Parent.Parent.Parent
local _Packages = _Package.Parent
-- Services
-- Packages
local Maid = require(_Packages:WaitForChild("Maid"))
local ColdFusion = require(_Packages:WaitForChild("ColdFusion"))

-- Modules
local Types = require(_Package:WaitForChild("Types"))
local Style = require(_Package:WaitForChild("Style"))
local Enums = require(_Package:WaitForChild("Enums"))

local Translators = require(_Package:WaitForChild("Translators"))

local Source = require(script.Parent:WaitForChild("ColdFusion"))

-- Types
type Maid = Maid.Maid
type Style = Style.Style
type FontData = Types.FontData
type OptionData = Types.OptionData
type ButtonData = Types.ButtonData
type ImageData = Types.ImageData
type CanBeState<V> = ColdFusion.CanBeState<V>
type Wrapper<BaseInstance, Definition, ClassName> = Translators.Wrapper<BaseInstance, Definition, ClassName>

export type FilterWrapperDefinition = {
	OnClick: (isSelected: boolean) -> (),
	IsInitiallySelected: boolean,
	Text: string,
	TextColor: Color3,
	DisabledTextColor: Color3,
	FillTextColor: Color3,
	DisabledFillTextColor: Color3,
	DisabledFillColor: Color3,
	IsEnabled: boolean,
	Elevation: number,
	SchemeType: Enums.SchemeType,
	FontData: FontData,
	Scale: number,
}
export type FilterWrapper = Wrapper<GuiObject, FilterWrapperDefinition, "Filter">

export type StyledFilterWrapperDefinition = {
	Style: Style,
	OnClick: (isSelected: boolean) -> (),
	Text: string,
	IsInitiallySelected: boolean,
	IsEnabled: boolean?,
	Elevation: number?,
}
export type StyledFilterWrapper = Wrapper<GuiObject, StyledFilterWrapperDefinition, "StyledFilter">
-- Constants
local DEFAULTS = require(script.Parent:WaitForChild("Defaults"))
-- Variables
-- References
-- Private Functions
-- Interface
local Interface = {}

function Interface.new(): StyledFilterWrapper
	local maid = Maid.new()
	local _fuse = ColdFusion.fuse(maid)
	local _Value = _fuse.Value
	local definition = {
		OnClick = _Value(function(isSelected: boolean) end),
		IsInitiallySelected = _Value(false),
		Text = _Value("Filter"),
		TextColor = _Value(Color3.new()),
		DisabledTextColor = _Value(Color3.new()),
		FillTextColor = _Value(Color3.new()),
		DisabledFillTextColor = _Value(Color3.new()),
		DisabledFillColor = _Value(Color3.new()),
		IsEnabled = _Value(true),
		Elevation = _Value(0),
		SchemeType = _Value(Enums.SchemeType.Light),
		FontData = _Value(Types.FontData.new(Font.fromEnum(Enum.Font.SourceSans), 14)),
		Scale = _Value(1),
	}
	local defaults: { [string]: unknown? } = {
		onClick = DEFAULTS.NEW.ON_CLICK,
		isInitiallySelected = DEFAULTS.NEW.IS_INITIALLY_SELECTED,
		text = DEFAULTS.NEW.TEXT,
		textColor = DEFAULTS.NEW.TEXT_COLOR,
		disabledTextColor = DEFAULTS.NEW.DISABLED_TEXT_COLOR,
		fillTextColor = DEFAULTS.NEW.FILL_TEXT_COLOR,
		disabledFillTextColor = DEFAULTS.NEW.DISABLED_FILL_TEXT_COLOR,
		disabledFillColor = DEFAULTS.NEW.DISABLED_FILL_COLOR,
		isEnabled = DEFAULTS.NEW.IS_ENABLED,
		elevation = DEFAULTS.NEW.ELEVATION,
		schemeType = DEFAULTS.NEW.SCHEME_TYPE,
		fontData = DEFAULTS.NEW.FONT_DATA,
		scale = DEFAULTS.NEW.SCALE,
	}
	local inst: GuiObject = Source.new(
		definition.OnClick,
		definition.IsInitiallySelected,
		definition.Text,
		definition.TextColor,
		definition.DisabledTextColor,
		definition.FillTextColor,
		definition.DisabledFillTextColor,
		definition.DisabledFillColor,
		definition.IsEnabled,
		definition.Elevation,
		definition.SchemeType,
		definition.FontData,
		definition.Scale
	)
	maid:GiveTask(inst.Destroying:Connect(function()
		maid:Destroy()
	end))
	local wrapper, cleanUp = Translators.ColdFusion.toWrapper("StyledFilter", inst, definition, defaults)
	maid:GiveTask(cleanUp)
	return wrapper
end

function Interface.primary(): StyledFilterWrapper
	local maid = Maid.new()
	local _fuse = ColdFusion.fuse(maid)
	local _Value = _fuse.Value
	local definition = {
		Style = _Value(Style.new(1, Enum.Font.SourceSans, "Light", Color3.new(0, 0.4, 0.7))),
		OnClick = _Value(function(isSelected: boolean) end),
		Text = _Value("Filter"),
		IsInitiallySelected = _Value(false),
		IsEnabled = _Value(true),
		Elevation = _Value(0),
	}
	local defaults: { [string]: unknown? } = {
		style = DEFAULTS.PRIMARY.STYLE,
		onClick = DEFAULTS.PRIMARY.ON_CLICK,
		text = DEFAULTS.PRIMARY.TEXT,
		isInitiallySelected = DEFAULTS.PRIMARY.IS_INITIALLY_SELECTED,
		isEnabled = DEFAULTS.PRIMARY.IS_ENABLED,
		elevation = DEFAULTS.PRIMARY.ELEVATION,
	}
	local inst: GuiObject = Source.primary(
		definition.Style,
		definition.OnClick,
		definition.Text,
		definition.IsInitiallySelected,
		definition.IsEnabled,
		definition.Elevation
	)
	maid:GiveTask(inst.Destroying:Connect(function()
		maid:Destroy()
	end))
	local wrapper, cleanUp = Translators.ColdFusion.toWrapper("StyledFilter", inst, definition, defaults)
	maid:GiveTask(cleanUp)
	return wrapper
end

function Interface.secondary(): StyledFilterWrapper
	local maid = Maid.new()
	local _fuse = ColdFusion.fuse(maid)
	local _Value = _fuse.Value
	local definition = {
		Style = _Value(Style.new(1, Enum.Font.SourceSans, "Light", Color3.new(0, 0.4, 0.7))),
		OnClick = _Value(function(isSelected: boolean) end),
		Text = _Value("Filter"),
		IsInitiallySelected = _Value(false),
		IsEnabled = _Value(true),
		Elevation = _Value(0),
	}
	local defaults: { [string]: unknown? } = {
		style = DEFAULTS.SECONDARY.STYLE,
		onClick = DEFAULTS.SECONDARY.ON_CLICK,
		text = DEFAULTS.SECONDARY.TEXT,
		isInitiallySelected = DEFAULTS.SECONDARY.IS_INITIALLY_SELECTED,
		isEnabled = DEFAULTS.SECONDARY.IS_ENABLED,
		elevation = DEFAULTS.SECONDARY.ELEVATION,
	}
	local inst: GuiObject = Source.secondary(
		definition.Style,
		definition.OnClick,
		definition.Text,
		definition.IsInitiallySelected,
		definition.IsEnabled,
		definition.Elevation
	)
	maid:GiveTask(inst.Destroying:Connect(function()
		maid:Destroy()
	end))
	local wrapper, cleanUp = Translators.ColdFusion.toWrapper("StyledFilter", inst, definition, defaults)
	maid:GiveTask(cleanUp)
	return wrapper
end

function Interface.tertiary(): StyledFilterWrapper
	local maid = Maid.new()
	local _fuse = ColdFusion.fuse(maid)
	local _Value = _fuse.Value
	local definition = {
		Style = _Value(Style.new(1, Enum.Font.SourceSans, "Light", Color3.new(0, 0.4, 0.7))),
		OnClick = _Value(function(isSelected: boolean) end),
		Text = _Value("Filter"),
		IsInitiallySelected = _Value(false),
		IsEnabled = _Value(true),
		Elevation = _Value(0),
	}
	local defaults: { [string]: unknown? } = {
		style = DEFAULTS.TERTIARY.STYLE,
		onClick = DEFAULTS.TERTIARY.ON_CLICK,
		text = DEFAULTS.TERTIARY.TEXT,
		isInitiallySelected = DEFAULTS.TERTIARY.IS_INITIALLY_SELECTED,
		isEnabled = DEFAULTS.TERTIARY.IS_ENABLED,
		elevation = DEFAULTS.TERTIARY.ELEVATION,
	}
	local inst: GuiObject = Source.tertiary(
		definition.Style,
		definition.OnClick,
		definition.Text,
		definition.IsInitiallySelected,
		definition.IsEnabled,
		definition.Elevation
	)
	maid:GiveTask(inst.Destroying:Connect(function()
		maid:Destroy()
	end))
	local wrapper, cleanUp = Translators.ColdFusion.toWrapper("StyledFilter", inst, definition, defaults)
	maid:GiveTask(cleanUp)
	return wrapper
end

return Interface
