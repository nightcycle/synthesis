--!strict
-- this script was generated by the build system, please do not make manual edits
local _Package = script.Parent.Parent.Parent.Parent
local _Packages = _Package.Parent
-- Services
-- Packages
local Maid = require(_Packages:WaitForChild("Maid"))
local ColdFusion = require(_Packages:WaitForChild("ColdFusion"))
local Roact = require(_Packages:WaitForChild("Roact"))

-- Modules
local Types = require(_Package:WaitForChild("Types"))
local Style = require(_Package:WaitForChild("Style"))

local Source = require(script.Parent:WaitForChild("ColdFusion"))

-- Types
type Maid = Maid.Maid
type Style = Style.Style
type FontData = Types.FontData
type OptionData = Types.OptionData
type ButtonData = Types.ButtonData
type ImageData = Types.ImageData
type CanBeState<V> = ColdFusion.CanBeState<V>
-- Constants
local DEFAULTS = require(script.Parent:WaitForChild("Defaults"))
-- Variables
-- References
-- Private Functions
-- Class
local Interface = {}

do
	local NewButtonBadge = Roact.Component:extend("NewButtonBadge")
	NewButtonBadge.defaultProps = {
		onClick = DEFAULTS.NEW.ON_CLICK,
		icon = DEFAULTS.NEW.ICON,
		label = DEFAULTS.NEW.LABEL,
		count = DEFAULTS.NEW.COUNT,
		textColor = DEFAULTS.NEW.TEXT_COLOR,
		hoverColor = DEFAULTS.NEW.HOVER_COLOR,
		errorTextColor = DEFAULTS.NEW.ERROR_TEXT_COLOR,
		errorBackgroundColor = DEFAULTS.NEW.ERROR_BACKGROUND_COLOR,
		elevation = DEFAULTS.NEW.ELEVATION,
		schemeType = DEFAULTS.NEW.SCHEME_TYPE,
		fontData = DEFAULTS.NEW.FONT_DATA,
		scale = DEFAULTS.NEW.SCALE,
	}
	function NewButtonBadge:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			onClick = _Value(self.defaultProps.onClick),
			icon = _Value(self.defaultProps.icon),
			label = _Value(self.defaultProps.label),
			count = _Value(self.defaultProps.count),
			textColor = _Value(self.defaultProps.textColor),
			hoverColor = _Value(self.defaultProps.hoverColor),
			errorTextColor = _Value(self.defaultProps.errorTextColor),
			errorBackgroundColor = _Value(self.defaultProps.errorBackgroundColor),
			elevation = _Value(self.defaultProps.elevation),
			schemeType = _Value(self.defaultProps.schemeType),
			fontData = _Value(self.defaultProps.fontData),
			scale = _Value(self.defaultProps.scale),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.new(
			self._internalStates.onClick,
			self._internalStates.icon,
			self._internalStates.label,
			self._internalStates.count,
			self._internalStates.textColor,
			self._internalStates.hoverColor,
			self._internalStates.errorTextColor,
			self._internalStates.errorBackgroundColor,
			self._internalStates.elevation,
			self._internalStates.schemeType,
			self._internalStates.fontData,
			self._internalStates.scale
		)
	end

	function NewButtonBadge:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return Roact.createElement(Roact.Portal, props)
	end
	function NewButtonBadge:didMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function NewButtonBadge:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.New = NewButtonBadge
end

do
	local OnPrimaryButtonBadge = Roact.Component:extend("OnPrimaryButtonBadge")
	OnPrimaryButtonBadge.defaultProps = {
		style = DEFAULTS.ON_PRIMARY.STYLE,
		onClick = DEFAULTS.ON_PRIMARY.ON_CLICK,
		icon = DEFAULTS.ON_PRIMARY.ICON,
		label = DEFAULTS.ON_PRIMARY.LABEL,
		count = DEFAULTS.ON_PRIMARY.COUNT,
		elevation = DEFAULTS.ON_PRIMARY.ELEVATION,
	}
	function OnPrimaryButtonBadge:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			style = _Value(self.defaultProps.style),
			onClick = _Value(self.defaultProps.onClick),
			icon = _Value(self.defaultProps.icon),
			label = _Value(self.defaultProps.label),
			count = _Value(self.defaultProps.count),
			elevation = _Value(self.defaultProps.elevation),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.onPrimary(
			self._internalStates.style,
			self._internalStates.onClick,
			self._internalStates.icon,
			self._internalStates.label,
			self._internalStates.count,
			self._internalStates.elevation
		)
	end

	function OnPrimaryButtonBadge:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return Roact.createElement(Roact.Portal, props)
	end
	function OnPrimaryButtonBadge:didMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function OnPrimaryButtonBadge:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.OnPrimary = OnPrimaryButtonBadge
end

do
	local OnSurfaceButtonBadge = Roact.Component:extend("OnSurfaceButtonBadge")
	OnSurfaceButtonBadge.defaultProps = {
		style = DEFAULTS.ON_SURFACE.STYLE,
		onClick = DEFAULTS.ON_SURFACE.ON_CLICK,
		icon = DEFAULTS.ON_SURFACE.ICON,
		label = DEFAULTS.ON_SURFACE.LABEL,
		count = DEFAULTS.ON_SURFACE.COUNT,
		elevation = DEFAULTS.ON_SURFACE.ELEVATION,
	}
	function OnSurfaceButtonBadge:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			style = _Value(self.defaultProps.style),
			onClick = _Value(self.defaultProps.onClick),
			icon = _Value(self.defaultProps.icon),
			label = _Value(self.defaultProps.label),
			count = _Value(self.defaultProps.count),
			elevation = _Value(self.defaultProps.elevation),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.onSurface(
			self._internalStates.style,
			self._internalStates.onClick,
			self._internalStates.icon,
			self._internalStates.label,
			self._internalStates.count,
			self._internalStates.elevation
		)
	end

	function OnSurfaceButtonBadge:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return Roact.createElement(Roact.Portal, props)
	end
	function OnSurfaceButtonBadge:didMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function OnSurfaceButtonBadge:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.OnSurface = OnSurfaceButtonBadge
end

return Interface
