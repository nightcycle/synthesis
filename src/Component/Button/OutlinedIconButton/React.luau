--!strict
-- this script was generated by the build system, please do not make manual edits
local _Package = script.Parent.Parent.Parent.Parent
local _Packages = _Package.Parent
-- Services
-- Packages
local Maid = require(_Packages:WaitForChild("Maid"))
local ColdFusion = require(_Packages:WaitForChild("ColdFusion"))

local React = require(_Packages:WaitForChild("React"))
local ReactRoblox = require(_Packages:WaitForChild("ReactRoblox"))

-- Modules
local Types = require(_Package:WaitForChild("Types"))
local Style = require(_Package:WaitForChild("Style"))

local Source = require(script.Parent:WaitForChild("ColdFusion"))

-- Types
type Maid = Maid.Maid
type Style = Style.Style
type FontData = Types.FontData
type OptionData = Types.OptionData
type ButtonData = Types.ButtonData
type ImageData = Types.ImageData
type CanBeState<V> = ColdFusion.CanBeState<V>
-- Constants
local DEFAULTS = require(script.Parent:WaitForChild("Defaults"))
-- Variables
-- References
-- Private Functions
-- Class
local Interface = {}

do
	local NewButtonOutlinedIconButton = React.Component:extend("NewButtonOutlinedIconButton")
	NewButtonOutlinedIconButton.defaultProps = {
		onClick = DEFAULTS.NEW.ON_CLICK,
		icon = DEFAULTS.NEW.ICON,
		textColor = DEFAULTS.NEW.TEXT_COLOR,
		disabledTextColor = DEFAULTS.NEW.DISABLED_TEXT_COLOR,
		isEnabled = DEFAULTS.NEW.IS_ENABLED,
		elevation = DEFAULTS.NEW.ELEVATION,
		schemeType = DEFAULTS.NEW.SCHEME_TYPE,
		fontData = DEFAULTS.NEW.FONT_DATA,
		scale = DEFAULTS.NEW.SCALE,
	}
	function NewButtonOutlinedIconButton:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			onClick = _Value(self.defaultProps.onClick),
			icon = _Value(self.defaultProps.icon),
			textColor = _Value(self.defaultProps.textColor),
			disabledTextColor = _Value(self.defaultProps.disabledTextColor),
			isEnabled = _Value(self.defaultProps.isEnabled),
			elevation = _Value(self.defaultProps.elevation),
			schemeType = _Value(self.defaultProps.schemeType),
			fontData = _Value(self.defaultProps.fontData),
			scale = _Value(self.defaultProps.scale),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.new(
			self._internalStates.onClick,
			self._internalStates.icon,
			self._internalStates.textColor,
			self._internalStates.disabledTextColor,
			self._internalStates.isEnabled,
			self._internalStates.elevation,
			self._internalStates.schemeType,
			self._internalStates.fontData,
			self._internalStates.scale
		)
	end

	function NewButtonOutlinedIconButton:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return React.createElement(ReactRoblox.createPortal, props)
	end
	function NewButtonOutlinedIconButton:componentDidMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function NewButtonOutlinedIconButton:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.New = NewButtonOutlinedIconButton
end

do
	local OnPrimaryButtonOutlinedIconButton = React.Component:extend("OnPrimaryButtonOutlinedIconButton")
	OnPrimaryButtonOutlinedIconButton.defaultProps = {
		style = DEFAULTS.ON_PRIMARY.STYLE,
		onClick = DEFAULTS.ON_PRIMARY.ON_CLICK,
		icon = DEFAULTS.ON_PRIMARY.ICON,
		elevation = DEFAULTS.ON_PRIMARY.ELEVATION,
		isEnabled = DEFAULTS.ON_PRIMARY.IS_ENABLED,
	}
	function OnPrimaryButtonOutlinedIconButton:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			style = _Value(self.defaultProps.style),
			onClick = _Value(self.defaultProps.onClick),
			icon = _Value(self.defaultProps.icon),
			elevation = _Value(self.defaultProps.elevation),
			isEnabled = _Value(self.defaultProps.isEnabled),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.onPrimary(
			self._internalStates.style,
			self._internalStates.onClick,
			self._internalStates.icon,
			self._internalStates.elevation,
			self._internalStates.isEnabled
		)
	end

	function OnPrimaryButtonOutlinedIconButton:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return React.createElement(ReactRoblox.createPortal, props)
	end
	function OnPrimaryButtonOutlinedIconButton:componentDidMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function OnPrimaryButtonOutlinedIconButton:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.OnPrimary = OnPrimaryButtonOutlinedIconButton
end

do
	local OnSecondaryButtonOutlinedIconButton = React.Component:extend("OnSecondaryButtonOutlinedIconButton")
	OnSecondaryButtonOutlinedIconButton.defaultProps = {
		style = DEFAULTS.ON_SECONDARY.STYLE,
		onClick = DEFAULTS.ON_SECONDARY.ON_CLICK,
		icon = DEFAULTS.ON_SECONDARY.ICON,
		elevation = DEFAULTS.ON_SECONDARY.ELEVATION,
		isEnabled = DEFAULTS.ON_SECONDARY.IS_ENABLED,
	}
	function OnSecondaryButtonOutlinedIconButton:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			style = _Value(self.defaultProps.style),
			onClick = _Value(self.defaultProps.onClick),
			icon = _Value(self.defaultProps.icon),
			elevation = _Value(self.defaultProps.elevation),
			isEnabled = _Value(self.defaultProps.isEnabled),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.onSecondary(
			self._internalStates.style,
			self._internalStates.onClick,
			self._internalStates.icon,
			self._internalStates.elevation,
			self._internalStates.isEnabled
		)
	end

	function OnSecondaryButtonOutlinedIconButton:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return React.createElement(ReactRoblox.createPortal, props)
	end
	function OnSecondaryButtonOutlinedIconButton:componentDidMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function OnSecondaryButtonOutlinedIconButton:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.OnSecondary = OnSecondaryButtonOutlinedIconButton
end

do
	local OnTertiaryButtonOutlinedIconButton = React.Component:extend("OnTertiaryButtonOutlinedIconButton")
	OnTertiaryButtonOutlinedIconButton.defaultProps = {
		style = DEFAULTS.ON_TERTIARY.STYLE,
		onClick = DEFAULTS.ON_TERTIARY.ON_CLICK,
		icon = DEFAULTS.ON_TERTIARY.ICON,
		elevation = DEFAULTS.ON_TERTIARY.ELEVATION,
		isEnabled = DEFAULTS.ON_TERTIARY.IS_ENABLED,
	}
	function OnTertiaryButtonOutlinedIconButton:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			style = _Value(self.defaultProps.style),
			onClick = _Value(self.defaultProps.onClick),
			icon = _Value(self.defaultProps.icon),
			elevation = _Value(self.defaultProps.elevation),
			isEnabled = _Value(self.defaultProps.isEnabled),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.onTertiary(
			self._internalStates.style,
			self._internalStates.onClick,
			self._internalStates.icon,
			self._internalStates.elevation,
			self._internalStates.isEnabled
		)
	end

	function OnTertiaryButtonOutlinedIconButton:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return React.createElement(ReactRoblox.createPortal, props)
	end
	function OnTertiaryButtonOutlinedIconButton:componentDidMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function OnTertiaryButtonOutlinedIconButton:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.OnTertiary = OnTertiaryButtonOutlinedIconButton
end

do
	local OnPrimaryContainerButtonOutlinedIconButton =
		React.Component:extend("OnPrimaryContainerButtonOutlinedIconButton")
	OnPrimaryContainerButtonOutlinedIconButton.defaultProps = {
		style = DEFAULTS.ON_PRIMARY_CONTAINER.STYLE,
		onClick = DEFAULTS.ON_PRIMARY_CONTAINER.ON_CLICK,
		icon = DEFAULTS.ON_PRIMARY_CONTAINER.ICON,
		elevation = DEFAULTS.ON_PRIMARY_CONTAINER.ELEVATION,
		isEnabled = DEFAULTS.ON_PRIMARY_CONTAINER.IS_ENABLED,
	}
	function OnPrimaryContainerButtonOutlinedIconButton:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			style = _Value(self.defaultProps.style),
			onClick = _Value(self.defaultProps.onClick),
			icon = _Value(self.defaultProps.icon),
			elevation = _Value(self.defaultProps.elevation),
			isEnabled = _Value(self.defaultProps.isEnabled),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.onPrimaryContainer(
			self._internalStates.style,
			self._internalStates.onClick,
			self._internalStates.icon,
			self._internalStates.elevation,
			self._internalStates.isEnabled
		)
	end

	function OnPrimaryContainerButtonOutlinedIconButton:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return React.createElement(ReactRoblox.createPortal, props)
	end
	function OnPrimaryContainerButtonOutlinedIconButton:componentDidMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function OnPrimaryContainerButtonOutlinedIconButton:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.OnPrimaryContainer = OnPrimaryContainerButtonOutlinedIconButton
end

do
	local OnSecondaryContainerButtonOutlinedIconButton =
		React.Component:extend("OnSecondaryContainerButtonOutlinedIconButton")
	OnSecondaryContainerButtonOutlinedIconButton.defaultProps = {
		style = DEFAULTS.ON_SECONDARY_CONTAINER.STYLE,
		onClick = DEFAULTS.ON_SECONDARY_CONTAINER.ON_CLICK,
		icon = DEFAULTS.ON_SECONDARY_CONTAINER.ICON,
		elevation = DEFAULTS.ON_SECONDARY_CONTAINER.ELEVATION,
		isEnabled = DEFAULTS.ON_SECONDARY_CONTAINER.IS_ENABLED,
	}
	function OnSecondaryContainerButtonOutlinedIconButton:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			style = _Value(self.defaultProps.style),
			onClick = _Value(self.defaultProps.onClick),
			icon = _Value(self.defaultProps.icon),
			elevation = _Value(self.defaultProps.elevation),
			isEnabled = _Value(self.defaultProps.isEnabled),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.onSecondaryContainer(
			self._internalStates.style,
			self._internalStates.onClick,
			self._internalStates.icon,
			self._internalStates.elevation,
			self._internalStates.isEnabled
		)
	end

	function OnSecondaryContainerButtonOutlinedIconButton:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return React.createElement(ReactRoblox.createPortal, props)
	end
	function OnSecondaryContainerButtonOutlinedIconButton:componentDidMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function OnSecondaryContainerButtonOutlinedIconButton:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.OnSecondaryContainer = OnSecondaryContainerButtonOutlinedIconButton
end

do
	local OnTertiaryContainerButtonOutlinedIconButton =
		React.Component:extend("OnTertiaryContainerButtonOutlinedIconButton")
	OnTertiaryContainerButtonOutlinedIconButton.defaultProps = {
		style = DEFAULTS.ON_TERTIARY_CONTAINER.STYLE,
		onClick = DEFAULTS.ON_TERTIARY_CONTAINER.ON_CLICK,
		icon = DEFAULTS.ON_TERTIARY_CONTAINER.ICON,
		elevation = DEFAULTS.ON_TERTIARY_CONTAINER.ELEVATION,
		isEnabled = DEFAULTS.ON_TERTIARY_CONTAINER.IS_ENABLED,
	}
	function OnTertiaryContainerButtonOutlinedIconButton:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			style = _Value(self.defaultProps.style),
			onClick = _Value(self.defaultProps.onClick),
			icon = _Value(self.defaultProps.icon),
			elevation = _Value(self.defaultProps.elevation),
			isEnabled = _Value(self.defaultProps.isEnabled),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.onTertiaryContainer(
			self._internalStates.style,
			self._internalStates.onClick,
			self._internalStates.icon,
			self._internalStates.elevation,
			self._internalStates.isEnabled
		)
	end

	function OnTertiaryContainerButtonOutlinedIconButton:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return React.createElement(ReactRoblox.createPortal, props)
	end
	function OnTertiaryContainerButtonOutlinedIconButton:componentDidMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function OnTertiaryContainerButtonOutlinedIconButton:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.OnTertiaryContainer = OnTertiaryContainerButtonOutlinedIconButton
end

return Interface
