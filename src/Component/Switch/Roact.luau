--!strict
-- this script was generated by the build system, please do not make manual edits
local _Package = script.Parent.Parent.Parent
local _Packages = _Package.Parent
-- Services
-- Packages
local Maid = require(_Packages:WaitForChild("Maid"))
local ColdFusion = require(_Packages:WaitForChild("ColdFusion"))
local Roact = require(_Packages:WaitForChild("Roact"))

-- Modules
local Types = require(_Package:WaitForChild("Types"))
local Style = require(_Package:WaitForChild("Style"))

local Source = require(script.Parent:WaitForChild("ColdFusion"))

-- Types
type Maid = Maid.Maid
type Style = Style.Style
type FontData = Types.FontData
type OptionData = Types.OptionData
type ButtonData = Types.ButtonData
type ImageData = Types.ImageData
type CanBeState<V> = ColdFusion.CanBeState<V>
-- Constants
local DEFAULTS = require(script.Parent:WaitForChild("Defaults"))
-- Variables
-- References
-- Private Functions
-- Class
local Interface = {}

do
	local NewSwitch = Roact.Component:extend("NewSwitch")
	NewSwitch.defaultProps = {
		onSelect = DEFAULTS.NEW.ON_SELECT,
		initialSelection = DEFAULTS.NEW.INITIAL_SELECTION,
		isEnabled = DEFAULTS.NEW.IS_ENABLED,
		includeIconOnSelected = DEFAULTS.NEW.INCLUDE_ICON_ON_SELECTED,
		includeIconOnDeselected = DEFAULTS.NEW.INCLUDE_ICON_ON_DESELECTED,
		backgroundColor = DEFAULTS.NEW.BACKGROUND_COLOR,
		onBackgroundColor = DEFAULTS.NEW.ON_BACKGROUND_COLOR,
		fillColor = DEFAULTS.NEW.FILL_COLOR,
		buttonColor = DEFAULTS.NEW.BUTTON_COLOR,
		onButtonColor = DEFAULTS.NEW.ON_BUTTON_COLOR,
		disabledColor = DEFAULTS.NEW.DISABLED_COLOR,
		onDisabledColor = DEFAULTS.NEW.ON_DISABLED_COLOR,
		elevation = DEFAULTS.NEW.ELEVATION,
		schemeType = DEFAULTS.NEW.SCHEME_TYPE,
		fontData = DEFAULTS.NEW.FONT_DATA,
		scale = DEFAULTS.NEW.SCALE,
	}
	function NewSwitch:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			onSelect = _Value(self.defaultProps.onSelect),
			initialSelection = _Value(self.defaultProps.initialSelection),
			isEnabled = _Value(self.defaultProps.isEnabled),
			includeIconOnSelected = _Value(self.defaultProps.includeIconOnSelected),
			includeIconOnDeselected = _Value(self.defaultProps.includeIconOnDeselected),
			backgroundColor = _Value(self.defaultProps.backgroundColor),
			onBackgroundColor = _Value(self.defaultProps.onBackgroundColor),
			fillColor = _Value(self.defaultProps.fillColor),
			buttonColor = _Value(self.defaultProps.buttonColor),
			onButtonColor = _Value(self.defaultProps.onButtonColor),
			disabledColor = _Value(self.defaultProps.disabledColor),
			onDisabledColor = _Value(self.defaultProps.onDisabledColor),
			elevation = _Value(self.defaultProps.elevation),
			schemeType = _Value(self.defaultProps.schemeType),
			fontData = _Value(self.defaultProps.fontData),
			scale = _Value(self.defaultProps.scale),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.new(
			self._internalStates.onSelect,
			self._internalStates.initialSelection,
			self._internalStates.isEnabled,
			self._internalStates.includeIconOnSelected,
			self._internalStates.includeIconOnDeselected,
			self._internalStates.backgroundColor,
			self._internalStates.onBackgroundColor,
			self._internalStates.fillColor,
			self._internalStates.buttonColor,
			self._internalStates.onButtonColor,
			self._internalStates.disabledColor,
			self._internalStates.onDisabledColor,
			self._internalStates.elevation,
			self._internalStates.schemeType,
			self._internalStates.fontData,
			self._internalStates.scale
		)
	end

	function NewSwitch:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return Roact.createElement(Roact.Portal, props)
	end
	function NewSwitch:didMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function NewSwitch:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.New = NewSwitch
end

do
	local PrimarySwitch = Roact.Component:extend("PrimarySwitch")
	PrimarySwitch.defaultProps = {
		style = DEFAULTS.PRIMARY.STYLE,
		onSelect = DEFAULTS.PRIMARY.ON_SELECT,
		initialSelection = DEFAULTS.PRIMARY.INITIAL_SELECTION,
		includeIconOnSelected = DEFAULTS.PRIMARY.INCLUDE_ICON_ON_SELECTED,
		includeIconOnDeselected = DEFAULTS.PRIMARY.INCLUDE_ICON_ON_DESELECTED,
		elevation = DEFAULTS.PRIMARY.ELEVATION,
		isEnabled = DEFAULTS.PRIMARY.IS_ENABLED,
	}
	function PrimarySwitch:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			style = _Value(self.defaultProps.style),
			onSelect = _Value(self.defaultProps.onSelect),
			initialSelection = _Value(self.defaultProps.initialSelection),
			includeIconOnSelected = _Value(self.defaultProps.includeIconOnSelected),
			includeIconOnDeselected = _Value(self.defaultProps.includeIconOnDeselected),
			elevation = _Value(self.defaultProps.elevation),
			isEnabled = _Value(self.defaultProps.isEnabled),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.primary(
			self._internalStates.style,
			self._internalStates.onSelect,
			self._internalStates.initialSelection,
			self._internalStates.includeIconOnSelected,
			self._internalStates.includeIconOnDeselected,
			self._internalStates.elevation,
			self._internalStates.isEnabled
		)
	end

	function PrimarySwitch:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return Roact.createElement(Roact.Portal, props)
	end
	function PrimarySwitch:didMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function PrimarySwitch:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.Primary = PrimarySwitch
end

do
	local SecondarySwitch = Roact.Component:extend("SecondarySwitch")
	SecondarySwitch.defaultProps = {
		style = DEFAULTS.SECONDARY.STYLE,
		onSelect = DEFAULTS.SECONDARY.ON_SELECT,
		initialSelection = DEFAULTS.SECONDARY.INITIAL_SELECTION,
		includeIconOnSelected = DEFAULTS.SECONDARY.INCLUDE_ICON_ON_SELECTED,
		includeIconOnDeselected = DEFAULTS.SECONDARY.INCLUDE_ICON_ON_DESELECTED,
		elevation = DEFAULTS.SECONDARY.ELEVATION,
		isEnabled = DEFAULTS.SECONDARY.IS_ENABLED,
	}
	function SecondarySwitch:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			style = _Value(self.defaultProps.style),
			onSelect = _Value(self.defaultProps.onSelect),
			initialSelection = _Value(self.defaultProps.initialSelection),
			includeIconOnSelected = _Value(self.defaultProps.includeIconOnSelected),
			includeIconOnDeselected = _Value(self.defaultProps.includeIconOnDeselected),
			elevation = _Value(self.defaultProps.elevation),
			isEnabled = _Value(self.defaultProps.isEnabled),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.secondary(
			self._internalStates.style,
			self._internalStates.onSelect,
			self._internalStates.initialSelection,
			self._internalStates.includeIconOnSelected,
			self._internalStates.includeIconOnDeselected,
			self._internalStates.elevation,
			self._internalStates.isEnabled
		)
	end

	function SecondarySwitch:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return Roact.createElement(Roact.Portal, props)
	end
	function SecondarySwitch:didMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function SecondarySwitch:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.Secondary = SecondarySwitch
end

do
	local TertiarySwitch = Roact.Component:extend("TertiarySwitch")
	TertiarySwitch.defaultProps = {
		style = DEFAULTS.TERTIARY.STYLE,
		onSelect = DEFAULTS.TERTIARY.ON_SELECT,
		initialSelection = DEFAULTS.TERTIARY.INITIAL_SELECTION,
		includeIconOnSelected = DEFAULTS.TERTIARY.INCLUDE_ICON_ON_SELECTED,
		includeIconOnDeselected = DEFAULTS.TERTIARY.INCLUDE_ICON_ON_DESELECTED,
		elevation = DEFAULTS.TERTIARY.ELEVATION,
		isEnabled = DEFAULTS.TERTIARY.IS_ENABLED,
	}
	function TertiarySwitch:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			style = _Value(self.defaultProps.style),
			onSelect = _Value(self.defaultProps.onSelect),
			initialSelection = _Value(self.defaultProps.initialSelection),
			includeIconOnSelected = _Value(self.defaultProps.includeIconOnSelected),
			includeIconOnDeselected = _Value(self.defaultProps.includeIconOnDeselected),
			elevation = _Value(self.defaultProps.elevation),
			isEnabled = _Value(self.defaultProps.isEnabled),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.tertiary(
			self._internalStates.style,
			self._internalStates.onSelect,
			self._internalStates.initialSelection,
			self._internalStates.includeIconOnSelected,
			self._internalStates.includeIconOnDeselected,
			self._internalStates.elevation,
			self._internalStates.isEnabled
		)
	end

	function TertiarySwitch:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return Roact.createElement(Roact.Portal, props)
	end
	function TertiarySwitch:didMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function TertiarySwitch:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.Tertiary = TertiarySwitch
end

return Interface
