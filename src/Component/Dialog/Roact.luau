--!strict
-- this script was generated by the build system, please do not make manual edits
local _Package = script.Parent.Parent.Parent
local _Packages = _Package.Parent
-- Services
-- Packages
local Maid = require(_Packages:WaitForChild("Maid"))
local ColdFusion = require(_Packages:WaitForChild("ColdFusion"))
local Roact = require(_Packages:WaitForChild("Roact"))

-- Modules
local Types = require(_Package:WaitForChild("Types"))
local Style = require(_Package:WaitForChild("Style"))

local Source = require(script.Parent:WaitForChild("ColdFusion"))

-- Types
type Maid = Maid.Maid
type Style = Style.Style
type FontData = Types.FontData
type OptionData = Types.OptionData
type ButtonData = Types.ButtonData
type ImageData = Types.ImageData
type CanBeState<V> = ColdFusion.CanBeState<V>
-- Constants
local DEFAULTS = require(script.Parent:WaitForChild("Defaults"))
-- Variables
-- References
-- Private Functions
-- Class
local Interface = {}

do
	local NewDialog = Roact.Component:extend("NewDialog")
	NewDialog.defaultProps = {
		buttons = DEFAULTS.NEW.BUTTONS,
		icon = DEFAULTS.NEW.ICON,
		headline = DEFAULTS.NEW.HEADLINE,
		description = DEFAULTS.NEW.DESCRIPTION,
		surfaceColor = DEFAULTS.NEW.SURFACE_COLOR,
		buttonTextColor = DEFAULTS.NEW.BUTTON_TEXT_COLOR,
		disabledTextColor = DEFAULTS.NEW.DISABLED_TEXT_COLOR,
		headlineColor = DEFAULTS.NEW.HEADLINE_COLOR,
		descriptionColor = DEFAULTS.NEW.DESCRIPTION_COLOR,
		scrimColor = DEFAULTS.NEW.SCRIM_COLOR,
		schemeType = DEFAULTS.NEW.SCHEME_TYPE,
		headlineFontData = DEFAULTS.NEW.HEADLINE_FONT_DATA,
		bodyFontData = DEFAULTS.NEW.BODY_FONT_DATA,
		buttonFontData = DEFAULTS.NEW.BUTTON_FONT_DATA,
		scale = DEFAULTS.NEW.SCALE,
	}
	function NewDialog:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			buttons = _Value(self.defaultProps.buttons),
			icon = _Value(self.defaultProps.icon),
			headline = _Value(self.defaultProps.headline),
			description = _Value(self.defaultProps.description),
			surfaceColor = _Value(self.defaultProps.surfaceColor),
			buttonTextColor = _Value(self.defaultProps.buttonTextColor),
			disabledTextColor = _Value(self.defaultProps.disabledTextColor),
			headlineColor = _Value(self.defaultProps.headlineColor),
			descriptionColor = _Value(self.defaultProps.descriptionColor),
			scrimColor = _Value(self.defaultProps.scrimColor),
			schemeType = _Value(self.defaultProps.schemeType),
			headlineFontData = _Value(self.defaultProps.headlineFontData),
			bodyFontData = _Value(self.defaultProps.bodyFontData),
			buttonFontData = _Value(self.defaultProps.buttonFontData),
			scale = _Value(self.defaultProps.scale),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.new(
			self._internalStates.buttons,
			self._internalStates.icon,
			self._internalStates.headline,
			self._internalStates.description,
			self._internalStates.surfaceColor,
			self._internalStates.buttonTextColor,
			self._internalStates.disabledTextColor,
			self._internalStates.headlineColor,
			self._internalStates.descriptionColor,
			self._internalStates.scrimColor,
			self._internalStates.schemeType,
			self._internalStates.headlineFontData,
			self._internalStates.bodyFontData,
			self._internalStates.buttonFontData,
			self._internalStates.scale
		)
	end

	function NewDialog:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return Roact.createElement(Roact.Portal, props)
	end
	function NewDialog:didMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function NewDialog:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.New = NewDialog
end

do
	local PrimaryDialog = Roact.Component:extend("PrimaryDialog")
	PrimaryDialog.defaultProps = {
		style = DEFAULTS.PRIMARY.STYLE,
		buttons = DEFAULTS.PRIMARY.BUTTONS,
		icon = DEFAULTS.PRIMARY.ICON,
		headline = DEFAULTS.PRIMARY.HEADLINE,
		description = DEFAULTS.PRIMARY.DESCRIPTION,
	}
	function PrimaryDialog:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			style = _Value(self.defaultProps.style),
			buttons = _Value(self.defaultProps.buttons),
			icon = _Value(self.defaultProps.icon),
			headline = _Value(self.defaultProps.headline),
			description = _Value(self.defaultProps.description),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.primary(
			self._internalStates.style,
			self._internalStates.buttons,
			self._internalStates.icon,
			self._internalStates.headline,
			self._internalStates.description
		)
	end

	function PrimaryDialog:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return Roact.createElement(Roact.Portal, props)
	end
	function PrimaryDialog:didMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function PrimaryDialog:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.Primary = PrimaryDialog
end

do
	local SecondaryDialog = Roact.Component:extend("SecondaryDialog")
	SecondaryDialog.defaultProps = {
		style = DEFAULTS.SECONDARY.STYLE,
		buttons = DEFAULTS.SECONDARY.BUTTONS,
		icon = DEFAULTS.SECONDARY.ICON,
		headline = DEFAULTS.SECONDARY.HEADLINE,
		description = DEFAULTS.SECONDARY.DESCRIPTION,
	}
	function SecondaryDialog:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			style = _Value(self.defaultProps.style),
			buttons = _Value(self.defaultProps.buttons),
			icon = _Value(self.defaultProps.icon),
			headline = _Value(self.defaultProps.headline),
			description = _Value(self.defaultProps.description),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.secondary(
			self._internalStates.style,
			self._internalStates.buttons,
			self._internalStates.icon,
			self._internalStates.headline,
			self._internalStates.description
		)
	end

	function SecondaryDialog:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return Roact.createElement(Roact.Portal, props)
	end
	function SecondaryDialog:didMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function SecondaryDialog:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.Secondary = SecondaryDialog
end

do
	local TertiaryDialog = Roact.Component:extend("TertiaryDialog")
	TertiaryDialog.defaultProps = {
		style = DEFAULTS.TERTIARY.STYLE,
		buttons = DEFAULTS.TERTIARY.BUTTONS,
		icon = DEFAULTS.TERTIARY.ICON,
		headline = DEFAULTS.TERTIARY.HEADLINE,
		description = DEFAULTS.TERTIARY.DESCRIPTION,
	}
	function TertiaryDialog:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			style = _Value(self.defaultProps.style),
			buttons = _Value(self.defaultProps.buttons),
			icon = _Value(self.defaultProps.icon),
			headline = _Value(self.defaultProps.headline),
			description = _Value(self.defaultProps.description),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.tertiary(
			self._internalStates.style,
			self._internalStates.buttons,
			self._internalStates.icon,
			self._internalStates.headline,
			self._internalStates.description
		)
	end

	function TertiaryDialog:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return Roact.createElement(Roact.Portal, props)
	end
	function TertiaryDialog:didMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function TertiaryDialog:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.Tertiary = TertiaryDialog
end

return Interface
