--!strict
-- this script was generated by the build system, please do not make manual edits
local _Package = script.Parent.Parent.Parent
local _Packages = _Package.Parent
-- Services
-- Packages
local Maid = require(_Packages:WaitForChild("Maid"))
local ColdFusion = require(_Packages:WaitForChild("ColdFusion"))

-- Modules
local Types = require(_Package:WaitForChild("Types"))
local Style = require(_Package:WaitForChild("Style"))
local Enums = require(_Package:WaitForChild("Enums"))

local Translators = require(_Package:WaitForChild("Translators"))

local Source = require(script.Parent:WaitForChild("ColdFusion"))

-- Types
type Maid = Maid.Maid
type Style = Style.Style
type FontData = Types.FontData
type OptionData = Types.OptionData
type ButtonData = Types.ButtonData
type ImageData = Types.ImageData
type CanBeState<V> = ColdFusion.CanBeState<V>
type Wrapper<BaseInstance, Definition, ClassName> = Translators.Wrapper<BaseInstance, Definition, ClassName>

export type DialogWrapperDefinition = {
	Buttons: { ButtonData },
	Icon: ImageData?,
	Headline: string?,
	Description: string?,
	SurfaceColor: Color3,
	ButtonTextColor: Color3,
	DisabledTextColor: Color3,
	HeadlineColor: Color3,
	DescriptionColor: Color3,
	ScrimColor: Color3,
	SchemeType: Enums.SchemeType,
	HeadlineFontData: FontData,
	BodyFontData: FontData,
	ButtonFontData: FontData,
	Scale: number,
}
export type DialogWrapper = Wrapper<GuiObject, DialogWrapperDefinition, "Dialog">

export type StyledDialogWrapperDefinition = {
	Style: Style,
	Buttons: { ButtonData },
	Icon: ImageData?,
	Headline: string?,
	Description: string?,
}
export type StyledDialogWrapper = Wrapper<GuiObject, StyledDialogWrapperDefinition, "StyledDialog">
-- Constants
local DEFAULTS = require(script.Parent:WaitForChild("Defaults"))
-- Variables
-- References
-- Private Functions
-- Interface
local Interface = {}

function Interface.new(): StyledDialogWrapper
	local maid = Maid.new()
	local _fuse = ColdFusion.fuse(maid)
	local _Value = _fuse.Value
	local definition = {
		Buttons = _Value({}),
		Icon = _Value(nil),
		Headline = _Value(""),
		Description = _Value(""),
		SurfaceColor = _Value(Color3.new()),
		ButtonTextColor = _Value(Color3.new()),
		DisabledTextColor = _Value(Color3.new()),
		HeadlineColor = _Value(Color3.new()),
		DescriptionColor = _Value(Color3.new()),
		ScrimColor = _Value(Color3.new()),
		SchemeType = _Value(Enums.SchemeType.Light),
		HeadlineFontData = _Value(Types.FontData.new(Font.fromEnum(Enum.Font.SourceSans), 14)),
		BodyFontData = _Value(Types.FontData.new(Font.fromEnum(Enum.Font.SourceSans), 14)),
		ButtonFontData = _Value(Types.FontData.new(Font.fromEnum(Enum.Font.SourceSans), 14)),
		Scale = _Value(1),
	}
	local defaults: { [string]: unknown? } = {
		buttons = DEFAULTS.NEW.BUTTONS,
		icon = DEFAULTS.NEW.ICON,
		headline = DEFAULTS.NEW.HEADLINE,
		description = DEFAULTS.NEW.DESCRIPTION,
		surfaceColor = DEFAULTS.NEW.SURFACE_COLOR,
		buttonTextColor = DEFAULTS.NEW.BUTTON_TEXT_COLOR,
		disabledTextColor = DEFAULTS.NEW.DISABLED_TEXT_COLOR,
		headlineColor = DEFAULTS.NEW.HEADLINE_COLOR,
		descriptionColor = DEFAULTS.NEW.DESCRIPTION_COLOR,
		scrimColor = DEFAULTS.NEW.SCRIM_COLOR,
		schemeType = DEFAULTS.NEW.SCHEME_TYPE,
		headlineFontData = DEFAULTS.NEW.HEADLINE_FONT_DATA,
		bodyFontData = DEFAULTS.NEW.BODY_FONT_DATA,
		buttonFontData = DEFAULTS.NEW.BUTTON_FONT_DATA,
		scale = DEFAULTS.NEW.SCALE,
	}
	local inst: GuiObject = Source.new(
		definition.Buttons,
		definition.Icon,
		definition.Headline,
		definition.Description,
		definition.SurfaceColor,
		definition.ButtonTextColor,
		definition.DisabledTextColor,
		definition.HeadlineColor,
		definition.DescriptionColor,
		definition.ScrimColor,
		definition.SchemeType,
		definition.HeadlineFontData,
		definition.BodyFontData,
		definition.ButtonFontData,
		definition.Scale
	)
	maid:GiveTask(inst.Destroying:Connect(function()
		maid:Destroy()
	end))
	local wrapper, cleanUp = Translators.ColdFusion.toWrapper("StyledDialog", inst, definition, defaults)
	maid:GiveTask(cleanUp)
	return wrapper
end

function Interface.primary(): StyledDialogWrapper
	local maid = Maid.new()
	local _fuse = ColdFusion.fuse(maid)
	local _Value = _fuse.Value
	local definition = {
		Style = _Value(Style.new(1, Enum.Font.SourceSans, "Light", Color3.new(0, 0.4, 0.7))),
		Buttons = _Value({}),
		Icon = _Value(nil),
		Headline = _Value(""),
		Description = _Value(""),
	}
	local defaults: { [string]: unknown? } = {
		style = DEFAULTS.PRIMARY.STYLE,
		buttons = DEFAULTS.PRIMARY.BUTTONS,
		icon = DEFAULTS.PRIMARY.ICON,
		headline = DEFAULTS.PRIMARY.HEADLINE,
		description = DEFAULTS.PRIMARY.DESCRIPTION,
	}
	local inst: GuiObject = Source.primary(
		definition.Style,
		definition.Buttons,
		definition.Icon,
		definition.Headline,
		definition.Description
	)
	maid:GiveTask(inst.Destroying:Connect(function()
		maid:Destroy()
	end))
	local wrapper, cleanUp = Translators.ColdFusion.toWrapper("StyledDialog", inst, definition, defaults)
	maid:GiveTask(cleanUp)
	return wrapper
end

function Interface.secondary(): StyledDialogWrapper
	local maid = Maid.new()
	local _fuse = ColdFusion.fuse(maid)
	local _Value = _fuse.Value
	local definition = {
		Style = _Value(Style.new(1, Enum.Font.SourceSans, "Light", Color3.new(0, 0.4, 0.7))),
		Buttons = _Value({}),
		Icon = _Value(nil),
		Headline = _Value(""),
		Description = _Value(""),
	}
	local defaults: { [string]: unknown? } = {
		style = DEFAULTS.SECONDARY.STYLE,
		buttons = DEFAULTS.SECONDARY.BUTTONS,
		icon = DEFAULTS.SECONDARY.ICON,
		headline = DEFAULTS.SECONDARY.HEADLINE,
		description = DEFAULTS.SECONDARY.DESCRIPTION,
	}
	local inst: GuiObject = Source.secondary(
		definition.Style,
		definition.Buttons,
		definition.Icon,
		definition.Headline,
		definition.Description
	)
	maid:GiveTask(inst.Destroying:Connect(function()
		maid:Destroy()
	end))
	local wrapper, cleanUp = Translators.ColdFusion.toWrapper("StyledDialog", inst, definition, defaults)
	maid:GiveTask(cleanUp)
	return wrapper
end

function Interface.tertiary(): StyledDialogWrapper
	local maid = Maid.new()
	local _fuse = ColdFusion.fuse(maid)
	local _Value = _fuse.Value
	local definition = {
		Style = _Value(Style.new(1, Enum.Font.SourceSans, "Light", Color3.new(0, 0.4, 0.7))),
		Buttons = _Value({}),
		Icon = _Value(nil),
		Headline = _Value(""),
		Description = _Value(""),
	}
	local defaults: { [string]: unknown? } = {
		style = DEFAULTS.TERTIARY.STYLE,
		buttons = DEFAULTS.TERTIARY.BUTTONS,
		icon = DEFAULTS.TERTIARY.ICON,
		headline = DEFAULTS.TERTIARY.HEADLINE,
		description = DEFAULTS.TERTIARY.DESCRIPTION,
	}
	local inst: GuiObject = Source.tertiary(
		definition.Style,
		definition.Buttons,
		definition.Icon,
		definition.Headline,
		definition.Description
	)
	maid:GiveTask(inst.Destroying:Connect(function()
		maid:Destroy()
	end))
	local wrapper, cleanUp = Translators.ColdFusion.toWrapper("StyledDialog", inst, definition, defaults)
	maid:GiveTask(cleanUp)
	return wrapper
end

return Interface
