--!strict
-- this script was generated by the build system, please do not make manual edits
local _Package = script.Parent.Parent.Parent
local _Packages = _Package.Parent
-- Services
-- Packages
local Maid = require(_Packages:WaitForChild("Maid"))
local ColdFusion = require(_Packages:WaitForChild("ColdFusion"))
local Roact = require(_Packages:WaitForChild("Roact"))

-- Modules
local Types = require(_Package:WaitForChild("Types"))
local Style = require(_Package:WaitForChild("Style"))
local Enums = require(_Package:WaitForChild("Enums"))
local Translators = require(_Package:WaitForChild("Translators"))

local Source = require(script.Parent:WaitForChild("ColdFusion"))

-- Types
type Maid = Maid.Maid
type Style = Style.Style
type FontData = Types.FontData
type OptionData = Types.OptionData
type ButtonData = Types.ButtonData
type ImageData = Types.ImageData
type CanBeState<V> = ColdFusion.CanBeState<V>

-- Constants
local DEFAULTS = require(script.Parent:WaitForChild("Defaults"))
-- Variables
-- References
-- Private Functions
-- Interface
local Interface = {}

do
	local NewCheckbox = Roact.Component:extend("NewCheckbox")

	function NewCheckbox:init()
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)

		local _new = _fuse.new
		local _bind = _fuse.bind
		local _clone = _fuse.clone
		local _import = _fuse.import

		local _Value = _fuse.Value
		local _Computed = _fuse.Computed

		self._internalStates = {
			onSelect = _Value(DEFAULTS.NEW.ON_SELECT),
			initialSelection = _Value(DEFAULTS.NEW.INITIAL_SELECTION),
			isEnabled = _Value(DEFAULTS.NEW.IS_ENABLED),
			outlineColor = _Value(DEFAULTS.NEW.OUTLINE_COLOR),
			fillColor = _Value(DEFAULTS.NEW.FILL_COLOR),
			iconColor = _Value(DEFAULTS.NEW.ICON_COLOR),
			disabledColor = _Value(DEFAULTS.NEW.DISABLED_COLOR),
			elevation = _Value(DEFAULTS.NEW.ELEVATION),
			schemeType = _Value(DEFAULTS.NEW.SCHEME_TYPE),
			fontData = _Value(DEFAULTS.NEW.FONT_DATA),
			scale = _Value(DEFAULTS.NEW.SCALE),
		}

		self._instance = Source.new(
			self._synthStates.onSelect,
			self._synthStates.initialSelection,
			self._synthStates.isEnabled,
			self._synthStates.outlineColor,
			self._synthStates.fillColor,
			self._synthStates.iconColor,
			self._synthStates.disabledColor,
			self._synthStates.elevation,
			self._synthStates.schemeType,
			self._synthStates.fontData,
			self._synthStates.scale
		)


	end

	function NewCheckbox:render()
		return Roact.createElement(Roact.Portal,{
			target = self._instance,
		})
	end

	function NewCheckbox:didUpdate(previousProps: {[string]: unknown}, previousState: {[string]: unknown})
		for k, v in pairs(previousProps) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					self._internalStates[k]:Set(self.props[k])
				else
					local success, _msg = pcall(function()
						self._instance[k] = self.props[k]
					end)
					if not success then
						warn(`bad property "{k}" with value "{v}" of type {type(v)} in component {self.__componentName}`)
					end
				end
			end
		end
	end

	-- run on destruction
	function NewCheckbox:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end

	Interface.NewCheckbox = NewCheckbox
end


return Interface
