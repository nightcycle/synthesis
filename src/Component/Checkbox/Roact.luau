--!strict
-- this script was generated by the build system, please do not make manual edits
local _Package = script.Parent.Parent.Parent
local _Packages = _Package.Parent
-- Services
-- Packages
local Maid = require(_Packages:WaitForChild("Maid"))
local ColdFusion = require(_Packages:WaitForChild("ColdFusion"))
local Roact = require(_Packages:WaitForChild("Roact"))

-- Modules
local Types = require(_Package:WaitForChild("Types"))
local Style = require(_Package:WaitForChild("Style"))
local Enums = require(_Package:WaitForChild("Enums"))
local Translators = require(_Package:WaitForChild("Translators"))

local Source = require(script.Parent:WaitForChild("ColdFusion"))

-- Types
type Maid = Maid.Maid
type Style = Style.Style
type FontData = Types.FontData
type OptionData = Types.OptionData
type ButtonData = Types.ButtonData
type ImageData = Types.ImageData
type CanBeState<V> = ColdFusion.CanBeState<V>

-- Constants
local DEFAULTS = require(script.Parent:WaitForChild("Defaults"))
-- Variables
-- References
-- Private Functions
-- Interface
local Interface = {}

do
	local NewCheckbox = Roact.Component:extend("NewCheckbox")

	NewCheckbox.defaultProps = {
		onSelect = (DEFAULTS.NEW.ON_SELECT),
		initialSelection = (DEFAULTS.NEW.INITIAL_SELECTION),
		isEnabled = (DEFAULTS.NEW.IS_ENABLED),
		outlineColor = (DEFAULTS.NEW.OUTLINE_COLOR),
		fillColor = (DEFAULTS.NEW.FILL_COLOR),
		iconColor = (DEFAULTS.NEW.ICON_COLOR),
		disabledColor = (DEFAULTS.NEW.DISABLED_COLOR),
		elevation = (DEFAULTS.NEW.ELEVATION),
		schemeType = (DEFAULTS.NEW.SCHEME_TYPE),
		fontData = (DEFAULTS.NEW.FONT_DATA),
		scale = (DEFAULTS.NEW.SCALE),
	}

	function NewCheckbox:init(initialProps: {[string]: unknown})
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)

		local _new = _fuse.new
		local _bind = _fuse.bind
		local _clone = _fuse.clone
		local _import = _fuse.import

		local _Value = _fuse.Value
		local _Computed = _fuse.Computed

		self._internalStates = {
			onSelect = _Value(self.defaultProps.onSelect),
			initialSelection = _Value(self.defaultProps.initialSelection),
			isEnabled = _Value(self.defaultProps.isEnabled),
			outlineColor = _Value(self.defaultProps.outlineColor),
			fillColor = _Value(self.defaultProps.fillColor),
			iconColor = _Value(self.defaultProps.iconColor),
			disabledColor = _Value(self.defaultProps.disabledColor),
			elevation = _Value(self.defaultProps.elevation),
			schemeType = _Value(self.defaultProps.schemeType),
			fontData = _Value(self.defaultProps.fontData),
			scale = _Value(self.defaultProps.scale),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end

		self._instance = Source.new(
			self._internalStates.onSelect,
			self._internalStates.initialSelection,
			self._internalStates.isEnabled,
			self._internalStates.outlineColor,
			self._internalStates.fillColor,
			self._internalStates.iconColor,
			self._internalStates.disabledColor,
			self._internalStates.elevation,
			self._internalStates.schemeType,
			self._internalStates.fontData,
			self._internalStates.scale
		)
		print("inst", self._instance)
	end

	function NewCheckbox:render()
		print("render")
		print("self", self)
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					print(`set internal state: {k} = {v}`)
					self._internalStates[k]:Set(v)
				else
					props[k] = v
					print(`apply to inst: {k} = {v}`)
				end
			end
		end
		print("props param", props)
		return Roact.createElement(Roact.Portal, props)
	end

	function NewCheckbox:didMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end

		print("didMount", self)
	end

	-- run on destruction
	function NewCheckbox:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end

	Interface.New = NewCheckbox
end


return Interface
