--!strict
-- this script was generated by the build system, please do not make manual edits
local _Package = script.Parent.Parent.Parent.Parent
local _Packages = _Package.Parent
-- Services
-- Packages
local Maid = require(_Packages:WaitForChild("Maid"))
local ColdFusion = require(_Packages:WaitForChild("ColdFusion"))

local React = require(_Packages:WaitForChild("React"))
local ReactRoblox = require(_Packages:WaitForChild("ReactRoblox"))

-- Modules
local Types = require(_Package:WaitForChild("Types"))
local Style = require(_Package:WaitForChild("Style"))

local Source = require(script.Parent:WaitForChild("ColdFusion"))

-- Types
type Maid = Maid.Maid
type Style = Style.Style
type FontData = Types.FontData
type OptionData = Types.OptionData
type ButtonData = Types.ButtonData
type ImageData = Types.ImageData
type CanBeState<V> = ColdFusion.CanBeState<V>
-- Constants
local DEFAULTS = require(script.Parent:WaitForChild("Defaults"))
-- Variables
-- References
-- Private Functions
-- Class
local Interface = {}

do
	local NewSearchFilled = React.Component:extend("NewSearchFilled")
	NewSearchFilled.defaultProps = {
		onInputEntered = DEFAULTS.NEW.ON_INPUT_ENTERED,
		label = DEFAULTS.NEW.LABEL,
		optionSolver = DEFAULTS.NEW.OPTION_SOLVER,
		optionConstructor = DEFAULTS.NEW.OPTION_CONSTRUCTOR,
		textColor = DEFAULTS.NEW.TEXT_COLOR,
		backgroundColor = DEFAULTS.NEW.BACKGROUND_COLOR,
		elevation = DEFAULTS.NEW.ELEVATION,
		schemeType = DEFAULTS.NEW.SCHEME_TYPE,
		fontData = DEFAULTS.NEW.FONT_DATA,
		scale = DEFAULTS.NEW.SCALE,
	}
	function NewSearchFilled:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			onInputEntered = _Value(self.defaultProps.onInputEntered),
			label = _Value(self.defaultProps.label),
			optionSolver = _Value(self.defaultProps.optionSolver),
			optionConstructor = _Value(self.defaultProps.optionConstructor),
			textColor = _Value(self.defaultProps.textColor),
			backgroundColor = _Value(self.defaultProps.backgroundColor),
			elevation = _Value(self.defaultProps.elevation),
			schemeType = _Value(self.defaultProps.schemeType),
			fontData = _Value(self.defaultProps.fontData),
			scale = _Value(self.defaultProps.scale),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.new(
			self._internalStates.onInputEntered,
			self._internalStates.label,
			self._internalStates.optionSolver,
			self._internalStates.optionConstructor,
			self._internalStates.textColor,
			self._internalStates.backgroundColor,
			self._internalStates.elevation,
			self._internalStates.schemeType,
			self._internalStates.fontData,
			self._internalStates.scale
		)
	end

	function NewSearchFilled:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return React.createElement(ReactRoblox.createPortal, props)
	end
	function NewSearchFilled:componentDidMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function NewSearchFilled:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.New = NewSearchFilled
end

do
	local PrimarySearchFilled = React.Component:extend("PrimarySearchFilled")
	PrimarySearchFilled.defaultProps = {
		style = DEFAULTS.PRIMARY.STYLE,
		onInputEntered = DEFAULTS.PRIMARY.ON_INPUT_ENTERED,
		label = DEFAULTS.PRIMARY.LABEL,
		optionSolver = DEFAULTS.PRIMARY.OPTION_SOLVER,
		optionConstructor = DEFAULTS.PRIMARY.OPTION_CONSTRUCTOR,
		elevation = DEFAULTS.PRIMARY.ELEVATION,
	}
	function PrimarySearchFilled:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			style = _Value(self.defaultProps.style),
			onInputEntered = _Value(self.defaultProps.onInputEntered),
			label = _Value(self.defaultProps.label),
			optionSolver = _Value(self.defaultProps.optionSolver),
			optionConstructor = _Value(self.defaultProps.optionConstructor),
			elevation = _Value(self.defaultProps.elevation),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.primary(
			self._internalStates.style,
			self._internalStates.onInputEntered,
			self._internalStates.label,
			self._internalStates.optionSolver,
			self._internalStates.optionConstructor,
			self._internalStates.elevation
		)
	end

	function PrimarySearchFilled:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return React.createElement(ReactRoblox.createPortal, props)
	end
	function PrimarySearchFilled:componentDidMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function PrimarySearchFilled:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.Primary = PrimarySearchFilled
end

do
	local SecondarySearchFilled = React.Component:extend("SecondarySearchFilled")
	SecondarySearchFilled.defaultProps = {
		style = DEFAULTS.SECONDARY.STYLE,
		onInputEntered = DEFAULTS.SECONDARY.ON_INPUT_ENTERED,
		label = DEFAULTS.SECONDARY.LABEL,
		optionSolver = DEFAULTS.SECONDARY.OPTION_SOLVER,
		optionConstructor = DEFAULTS.SECONDARY.OPTION_CONSTRUCTOR,
		elevation = DEFAULTS.SECONDARY.ELEVATION,
	}
	function SecondarySearchFilled:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			style = _Value(self.defaultProps.style),
			onInputEntered = _Value(self.defaultProps.onInputEntered),
			label = _Value(self.defaultProps.label),
			optionSolver = _Value(self.defaultProps.optionSolver),
			optionConstructor = _Value(self.defaultProps.optionConstructor),
			elevation = _Value(self.defaultProps.elevation),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.secondary(
			self._internalStates.style,
			self._internalStates.onInputEntered,
			self._internalStates.label,
			self._internalStates.optionSolver,
			self._internalStates.optionConstructor,
			self._internalStates.elevation
		)
	end

	function SecondarySearchFilled:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return React.createElement(ReactRoblox.createPortal, props)
	end
	function SecondarySearchFilled:componentDidMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function SecondarySearchFilled:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.Secondary = SecondarySearchFilled
end

do
	local TertiarySearchFilled = React.Component:extend("TertiarySearchFilled")
	TertiarySearchFilled.defaultProps = {
		style = DEFAULTS.TERTIARY.STYLE,
		onInputEntered = DEFAULTS.TERTIARY.ON_INPUT_ENTERED,
		label = DEFAULTS.TERTIARY.LABEL,
		optionSolver = DEFAULTS.TERTIARY.OPTION_SOLVER,
		optionConstructor = DEFAULTS.TERTIARY.OPTION_CONSTRUCTOR,
		elevation = DEFAULTS.TERTIARY.ELEVATION,
	}
	function TertiarySearchFilled:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			style = _Value(self.defaultProps.style),
			onInputEntered = _Value(self.defaultProps.onInputEntered),
			label = _Value(self.defaultProps.label),
			optionSolver = _Value(self.defaultProps.optionSolver),
			optionConstructor = _Value(self.defaultProps.optionConstructor),
			elevation = _Value(self.defaultProps.elevation),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.tertiary(
			self._internalStates.style,
			self._internalStates.onInputEntered,
			self._internalStates.label,
			self._internalStates.optionSolver,
			self._internalStates.optionConstructor,
			self._internalStates.elevation
		)
	end

	function TertiarySearchFilled:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return React.createElement(ReactRoblox.createPortal, props)
	end
	function TertiarySearchFilled:componentDidMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function TertiarySearchFilled:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.Tertiary = TertiarySearchFilled
end

do
	local PrimaryContainerSearchFilled = React.Component:extend("PrimaryContainerSearchFilled")
	PrimaryContainerSearchFilled.defaultProps = {
		style = DEFAULTS.PRIMARY_CONTAINER.STYLE,
		onInputEntered = DEFAULTS.PRIMARY_CONTAINER.ON_INPUT_ENTERED,
		label = DEFAULTS.PRIMARY_CONTAINER.LABEL,
		optionSolver = DEFAULTS.PRIMARY_CONTAINER.OPTION_SOLVER,
		optionConstructor = DEFAULTS.PRIMARY_CONTAINER.OPTION_CONSTRUCTOR,
		elevation = DEFAULTS.PRIMARY_CONTAINER.ELEVATION,
	}
	function PrimaryContainerSearchFilled:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			style = _Value(self.defaultProps.style),
			onInputEntered = _Value(self.defaultProps.onInputEntered),
			label = _Value(self.defaultProps.label),
			optionSolver = _Value(self.defaultProps.optionSolver),
			optionConstructor = _Value(self.defaultProps.optionConstructor),
			elevation = _Value(self.defaultProps.elevation),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.primaryContainer(
			self._internalStates.style,
			self._internalStates.onInputEntered,
			self._internalStates.label,
			self._internalStates.optionSolver,
			self._internalStates.optionConstructor,
			self._internalStates.elevation
		)
	end

	function PrimaryContainerSearchFilled:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return React.createElement(ReactRoblox.createPortal, props)
	end
	function PrimaryContainerSearchFilled:componentDidMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function PrimaryContainerSearchFilled:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.PrimaryContainer = PrimaryContainerSearchFilled
end

do
	local SecondaryContainerSearchFilled = React.Component:extend("SecondaryContainerSearchFilled")
	SecondaryContainerSearchFilled.defaultProps = {
		style = DEFAULTS.SECONDARY_CONTAINER.STYLE,
		onInputEntered = DEFAULTS.SECONDARY_CONTAINER.ON_INPUT_ENTERED,
		label = DEFAULTS.SECONDARY_CONTAINER.LABEL,
		optionSolver = DEFAULTS.SECONDARY_CONTAINER.OPTION_SOLVER,
		optionConstructor = DEFAULTS.SECONDARY_CONTAINER.OPTION_CONSTRUCTOR,
		elevation = DEFAULTS.SECONDARY_CONTAINER.ELEVATION,
	}
	function SecondaryContainerSearchFilled:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			style = _Value(self.defaultProps.style),
			onInputEntered = _Value(self.defaultProps.onInputEntered),
			label = _Value(self.defaultProps.label),
			optionSolver = _Value(self.defaultProps.optionSolver),
			optionConstructor = _Value(self.defaultProps.optionConstructor),
			elevation = _Value(self.defaultProps.elevation),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.secondaryContainer(
			self._internalStates.style,
			self._internalStates.onInputEntered,
			self._internalStates.label,
			self._internalStates.optionSolver,
			self._internalStates.optionConstructor,
			self._internalStates.elevation
		)
	end

	function SecondaryContainerSearchFilled:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return React.createElement(ReactRoblox.createPortal, props)
	end
	function SecondaryContainerSearchFilled:componentDidMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function SecondaryContainerSearchFilled:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.SecondaryContainer = SecondaryContainerSearchFilled
end

do
	local TertiaryContainerSearchFilled = React.Component:extend("TertiaryContainerSearchFilled")
	TertiaryContainerSearchFilled.defaultProps = {
		style = DEFAULTS.TERTIARY_CONTAINER.STYLE,
		onInputEntered = DEFAULTS.TERTIARY_CONTAINER.ON_INPUT_ENTERED,
		label = DEFAULTS.TERTIARY_CONTAINER.LABEL,
		optionSolver = DEFAULTS.TERTIARY_CONTAINER.OPTION_SOLVER,
		optionConstructor = DEFAULTS.TERTIARY_CONTAINER.OPTION_CONSTRUCTOR,
		elevation = DEFAULTS.TERTIARY_CONTAINER.ELEVATION,
	}
	function TertiaryContainerSearchFilled:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			style = _Value(self.defaultProps.style),
			onInputEntered = _Value(self.defaultProps.onInputEntered),
			label = _Value(self.defaultProps.label),
			optionSolver = _Value(self.defaultProps.optionSolver),
			optionConstructor = _Value(self.defaultProps.optionConstructor),
			elevation = _Value(self.defaultProps.elevation),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.tertiaryContainer(
			self._internalStates.style,
			self._internalStates.onInputEntered,
			self._internalStates.label,
			self._internalStates.optionSolver,
			self._internalStates.optionConstructor,
			self._internalStates.elevation
		)
	end

	function TertiaryContainerSearchFilled:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return React.createElement(ReactRoblox.createPortal, props)
	end
	function TertiaryContainerSearchFilled:componentDidMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function TertiaryContainerSearchFilled:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.TertiaryContainer = TertiaryContainerSearchFilled
end

return Interface
