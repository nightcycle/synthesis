--!strict
-- this script was generated by the build system, please do not make manual edits
local _Package = script.Parent.Parent.Parent.Parent
local _Packages = _Package.Parent
-- Services
-- Packages
local Maid = require(_Packages:WaitForChild("Maid"))
local ColdFusion = require(_Packages:WaitForChild("ColdFusion"))
local Roact = require(_Packages:WaitForChild("Roact"))

-- Modules
local Types = require(_Package:WaitForChild("Types"))
local Style = require(_Package:WaitForChild("Style"))

local Source = require(script.Parent:WaitForChild("ColdFusion"))

-- Types
type Maid = Maid.Maid
type Style = Style.Style
type FontData = Types.FontData
type OptionData = Types.OptionData
type ButtonData = Types.ButtonData
type ImageData = Types.ImageData
type CanBeState<V> = ColdFusion.CanBeState<V>
-- Constants
local DEFAULTS = require(script.Parent:WaitForChild("Defaults"))
-- Variables
-- References
-- Private Functions
-- Class
local Interface = {}

do
	local NewSearchText = Roact.Component:extend("component_name")
	NewSearchText.defaultProps = {
		onInputEntered = DEFAULTS.NEW.ON_INPUT_ENTERED,
		label = DEFAULTS.NEW.LABEL,
		optionSolver = DEFAULTS.NEW.OPTION_SOLVER,
		optionConstructor = DEFAULTS.NEW.OPTION_CONSTRUCTOR,
		textColor = DEFAULTS.NEW.TEXT_COLOR,
		backgroundColor = DEFAULTS.NEW.BACKGROUND_COLOR,
		elevation = DEFAULTS.NEW.ELEVATION,
		schemeType = DEFAULTS.NEW.SCHEME_TYPE,
		fontData = DEFAULTS.NEW.FONT_DATA,
		scale = DEFAULTS.NEW.SCALE,
	}
	function NewSearchText:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			onInputEntered = _Value(self.defaultProps.onInputEntered),
			label = _Value(self.defaultProps.label),
			optionSolver = _Value(self.defaultProps.optionSolver),
			optionConstructor = _Value(self.defaultProps.optionConstructor),
			textColor = _Value(self.defaultProps.textColor),
			backgroundColor = _Value(self.defaultProps.backgroundColor),
			elevation = _Value(self.defaultProps.elevation),
			schemeType = _Value(self.defaultProps.schemeType),
			fontData = _Value(self.defaultProps.fontData),
			scale = _Value(self.defaultProps.scale),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.new(
			self._internalStates.onInputEntered,
			self._internalStates.label,
			self._internalStates.optionSolver,
			self._internalStates.optionConstructor,
			self._internalStates.textColor,
			self._internalStates.backgroundColor,
			self._internalStates.elevation,
			self._internalStates.schemeType,
			self._internalStates.fontData,
			self._internalStates.scale
		)
	end

	function NewSearchText:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return Roact.createElement(Roact.Portal, props)
	end
	function NewSearchText:didMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function NewSearchText:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.New = NewSearchText
end

do
	local OnPrimarySearchText = Roact.Component:extend("component_name")
	OnPrimarySearchText.defaultProps = {
		style = DEFAULTS.ON_PRIMARY.STYLE,
		onInputEntered = DEFAULTS.ON_PRIMARY.ON_INPUT_ENTERED,
		label = DEFAULTS.ON_PRIMARY.LABEL,
		optionSolver = DEFAULTS.ON_PRIMARY.OPTION_SOLVER,
		optionConstructor = DEFAULTS.ON_PRIMARY.OPTION_CONSTRUCTOR,
		elevation = DEFAULTS.ON_PRIMARY.ELEVATION,
	}
	function OnPrimarySearchText:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			style = _Value(self.defaultProps.style),
			onInputEntered = _Value(self.defaultProps.onInputEntered),
			label = _Value(self.defaultProps.label),
			optionSolver = _Value(self.defaultProps.optionSolver),
			optionConstructor = _Value(self.defaultProps.optionConstructor),
			elevation = _Value(self.defaultProps.elevation),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.onPrimary(
			self._internalStates.style,
			self._internalStates.onInputEntered,
			self._internalStates.label,
			self._internalStates.optionSolver,
			self._internalStates.optionConstructor,
			self._internalStates.elevation
		)
	end

	function OnPrimarySearchText:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return Roact.createElement(Roact.Portal, props)
	end
	function OnPrimarySearchText:didMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function OnPrimarySearchText:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.OnPrimary = OnPrimarySearchText
end

do
	local OnSecondarySearchText = Roact.Component:extend("component_name")
	OnSecondarySearchText.defaultProps = {
		style = DEFAULTS.ON_SECONDARY.STYLE,
		onInputEntered = DEFAULTS.ON_SECONDARY.ON_INPUT_ENTERED,
		label = DEFAULTS.ON_SECONDARY.LABEL,
		optionSolver = DEFAULTS.ON_SECONDARY.OPTION_SOLVER,
		optionConstructor = DEFAULTS.ON_SECONDARY.OPTION_CONSTRUCTOR,
		elevation = DEFAULTS.ON_SECONDARY.ELEVATION,
	}
	function OnSecondarySearchText:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			style = _Value(self.defaultProps.style),
			onInputEntered = _Value(self.defaultProps.onInputEntered),
			label = _Value(self.defaultProps.label),
			optionSolver = _Value(self.defaultProps.optionSolver),
			optionConstructor = _Value(self.defaultProps.optionConstructor),
			elevation = _Value(self.defaultProps.elevation),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.onSecondary(
			self._internalStates.style,
			self._internalStates.onInputEntered,
			self._internalStates.label,
			self._internalStates.optionSolver,
			self._internalStates.optionConstructor,
			self._internalStates.elevation
		)
	end

	function OnSecondarySearchText:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return Roact.createElement(Roact.Portal, props)
	end
	function OnSecondarySearchText:didMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function OnSecondarySearchText:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.OnSecondary = OnSecondarySearchText
end

do
	local OnTertiarySearchText = Roact.Component:extend("component_name")
	OnTertiarySearchText.defaultProps = {
		style = DEFAULTS.ON_TERTIARY.STYLE,
		onInputEntered = DEFAULTS.ON_TERTIARY.ON_INPUT_ENTERED,
		label = DEFAULTS.ON_TERTIARY.LABEL,
		optionSolver = DEFAULTS.ON_TERTIARY.OPTION_SOLVER,
		optionConstructor = DEFAULTS.ON_TERTIARY.OPTION_CONSTRUCTOR,
		elevation = DEFAULTS.ON_TERTIARY.ELEVATION,
	}
	function OnTertiarySearchText:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			style = _Value(self.defaultProps.style),
			onInputEntered = _Value(self.defaultProps.onInputEntered),
			label = _Value(self.defaultProps.label),
			optionSolver = _Value(self.defaultProps.optionSolver),
			optionConstructor = _Value(self.defaultProps.optionConstructor),
			elevation = _Value(self.defaultProps.elevation),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.onTertiary(
			self._internalStates.style,
			self._internalStates.onInputEntered,
			self._internalStates.label,
			self._internalStates.optionSolver,
			self._internalStates.optionConstructor,
			self._internalStates.elevation
		)
	end

	function OnTertiarySearchText:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return Roact.createElement(Roact.Portal, props)
	end
	function OnTertiarySearchText:didMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function OnTertiarySearchText:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.OnTertiary = OnTertiarySearchText
end

do
	local OnPrimaryContainerSearchText = Roact.Component:extend("component_name")
	OnPrimaryContainerSearchText.defaultProps = {
		style = DEFAULTS.ON_PRIMARY_CONTAINER.STYLE,
		onInputEntered = DEFAULTS.ON_PRIMARY_CONTAINER.ON_INPUT_ENTERED,
		label = DEFAULTS.ON_PRIMARY_CONTAINER.LABEL,
		optionSolver = DEFAULTS.ON_PRIMARY_CONTAINER.OPTION_SOLVER,
		optionConstructor = DEFAULTS.ON_PRIMARY_CONTAINER.OPTION_CONSTRUCTOR,
		elevation = DEFAULTS.ON_PRIMARY_CONTAINER.ELEVATION,
	}
	function OnPrimaryContainerSearchText:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			style = _Value(self.defaultProps.style),
			onInputEntered = _Value(self.defaultProps.onInputEntered),
			label = _Value(self.defaultProps.label),
			optionSolver = _Value(self.defaultProps.optionSolver),
			optionConstructor = _Value(self.defaultProps.optionConstructor),
			elevation = _Value(self.defaultProps.elevation),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.onPrimaryContainer(
			self._internalStates.style,
			self._internalStates.onInputEntered,
			self._internalStates.label,
			self._internalStates.optionSolver,
			self._internalStates.optionConstructor,
			self._internalStates.elevation
		)
	end

	function OnPrimaryContainerSearchText:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return Roact.createElement(Roact.Portal, props)
	end
	function OnPrimaryContainerSearchText:didMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function OnPrimaryContainerSearchText:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.OnPrimaryContainer = OnPrimaryContainerSearchText
end

do
	local OnSecondaryContainerSearchText = Roact.Component:extend("component_name")
	OnSecondaryContainerSearchText.defaultProps = {
		style = DEFAULTS.ON_SECONDARY_CONTAINER.STYLE,
		onInputEntered = DEFAULTS.ON_SECONDARY_CONTAINER.ON_INPUT_ENTERED,
		label = DEFAULTS.ON_SECONDARY_CONTAINER.LABEL,
		optionSolver = DEFAULTS.ON_SECONDARY_CONTAINER.OPTION_SOLVER,
		optionConstructor = DEFAULTS.ON_SECONDARY_CONTAINER.OPTION_CONSTRUCTOR,
		elevation = DEFAULTS.ON_SECONDARY_CONTAINER.ELEVATION,
	}
	function OnSecondaryContainerSearchText:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			style = _Value(self.defaultProps.style),
			onInputEntered = _Value(self.defaultProps.onInputEntered),
			label = _Value(self.defaultProps.label),
			optionSolver = _Value(self.defaultProps.optionSolver),
			optionConstructor = _Value(self.defaultProps.optionConstructor),
			elevation = _Value(self.defaultProps.elevation),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.onSecondaryContainer(
			self._internalStates.style,
			self._internalStates.onInputEntered,
			self._internalStates.label,
			self._internalStates.optionSolver,
			self._internalStates.optionConstructor,
			self._internalStates.elevation
		)
	end

	function OnSecondaryContainerSearchText:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return Roact.createElement(Roact.Portal, props)
	end
	function OnSecondaryContainerSearchText:didMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function OnSecondaryContainerSearchText:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.OnSecondaryContainer = OnSecondaryContainerSearchText
end

do
	local OnTertiaryContainerSearchText = Roact.Component:extend("component_name")
	OnTertiaryContainerSearchText.defaultProps = {
		style = DEFAULTS.ON_TERTIARY_CONTAINER.STYLE,
		onInputEntered = DEFAULTS.ON_TERTIARY_CONTAINER.ON_INPUT_ENTERED,
		label = DEFAULTS.ON_TERTIARY_CONTAINER.LABEL,
		optionSolver = DEFAULTS.ON_TERTIARY_CONTAINER.OPTION_SOLVER,
		optionConstructor = DEFAULTS.ON_TERTIARY_CONTAINER.OPTION_CONSTRUCTOR,
		elevation = DEFAULTS.ON_TERTIARY_CONTAINER.ELEVATION,
	}
	function OnTertiaryContainerSearchText:init(initialProps: { [string]: unknown })
		self._maid = Maid.new()
		local _fuse = ColdFusion.fuse(self._maid)
		local _Value = _fuse.Value
		self._internalStates = {
			style = _Value(self.defaultProps.style),
			onInputEntered = _Value(self.defaultProps.onInputEntered),
			label = _Value(self.defaultProps.label),
			optionSolver = _Value(self.defaultProps.optionSolver),
			optionConstructor = _Value(self.defaultProps.optionConstructor),
			elevation = _Value(self.defaultProps.elevation),
		}
		table.freeze(self._internalStates)
		for k, v in pairs(initialProps) do
			if self._internalStates[k] then
				self._internalStates[k]:Set(v)
			end
		end
		self._instance = Source.onTertiaryContainer(
			self._internalStates.style,
			self._internalStates.onInputEntered,
			self._internalStates.label,
			self._internalStates.optionSolver,
			self._internalStates.optionConstructor,
			self._internalStates.elevation
		)
	end

	function OnTertiaryContainerSearchText:render()
		local props = {
			target = self._instance,
		}
		for k, v in pairs(self.props) do
			if self.props[k] ~= v then
				if self._internalStates[k] then
					if v == nil then
						v = self.defaultProps[k]
					end
					self._internalStates[k]:Set(v)
				else
					props[k] = v
				end
			end
		end
		return Roact.createElement(Roact.Portal, props)
	end
	function OnTertiaryContainerSearchText:didMount()
		for k, v in pairs(self) do
			if typeof(v) == "table" then
				if v["virtualNode"] then
					if self._instance.Parent ~= v["virtualNode"]["hostParent"] then
						self._instance.Parent = v["virtualNode"]["hostParent"]
					end
					break
				end
			end
		end
	end
	function OnTertiaryContainerSearchText:willUnmount()
		self._maid:Destroy()
		self._instance:Destroy()
	end
	Interface.OnTertiaryContainer = OnTertiaryContainerSearchText
end

return Interface
